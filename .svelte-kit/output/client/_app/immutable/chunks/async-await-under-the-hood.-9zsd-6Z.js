import{s as _s,n as ss}from"./scheduler.Bwf3gQP1.js";import{S as hs,i as ws,d as n,a,c as e,g as t,e as o,f as Y,h as c,j as p,H as $}from"./index.BB1_hVuL.js";function bs(us){let r,ls="ES2017 引入了<code>Async/Await</code>语法，使得我们的异步代码看起来更像是同步代码，隐藏了成堆的回调函数。但是 Javascript 引擎内部是如何实现的呢？",g,F,ns="先来看看 Babel 的实现",G,y,as="在前几年浏览器还没有完全原生支持<code>async</code>语法时，为了抢先体验 ECMA Spec 中的新功能，我们一般使用 Babel 将最新语法转译<code>Transpile</code>成浏览器支持的语法结构",S,D,os="如：",z,b,vs=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">async</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">url</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  try</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">    const</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF;font-style:italic"> await</span><span style="color:#82AAFF"> fetch</span><span style="color:#F07178">(</span><span style="color:#BABED8">url</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#BABED8">    console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF;font-style:italic">await</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">text</span><span style="color:#F07178">())</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">err</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">    console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">fetch failed</span><span style="color:#89DDFF">'</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,T,i,ps="转译成了",q,H,Cs=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> asyncGeneratorStep</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">gen</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> _next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> _throw</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> key</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> arg</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#89DDFF;font-style:italic"> try</span><span style="color:#89DDFF"> {</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> gen</span><span style="color:#F07178">[</span><span style="color:#BABED8">key</span><span style="color:#F07178">](</span><span style="color:#BABED8">arg</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">value</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF;font-style:italic"> catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">error</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span><span style="color:#82AAFF"> reject</span><span style="color:#F07178">(</span><span style="color:#BABED8">error</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF;font-style:italic"> return</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF;font-style:italic"> if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span><span style="color:#82AAFF"> resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF;font-style:italic"> else</span><span style="color:#89DDFF"> {</span><span style="color:#FFCB6B"> Promise</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#F07178">(</span><span style="color:#BABED8">_next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _throw</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> _asyncToGenerator</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#89DDFF;font-style:italic"> return</span><span style="color:#C792EA"> function</span><span style="color:#89DDFF"> ()</span><span style="color:#89DDFF"> {</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> self</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> this,</span><span style="color:#BABED8"> args</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> arguments</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF;font-style:italic"> return</span><span style="color:#89DDFF"> new</span><span style="color:#FFCB6B"> Promise</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> gen</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> fn</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#BABED8">self</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> args</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> _next</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#82AAFF"> asyncGeneratorStep</span><span style="color:#F07178">(</span><span style="color:#BABED8">gen</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> reject</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _throw</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">next</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> _throw</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#82AAFF"> asyncGeneratorStep</span><span style="color:#F07178">(</span><span style="color:#BABED8">gen</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> reject</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _throw</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">throw</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#82AAFF"> _next</span><span style="color:#F07178">(</span><span style="color:#89DDFF">undefined</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> };</span><span style="color:#89DDFF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">_x</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> _foo</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this,</span><span style="color:#BABED8"> arguments</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> _foo</span><span style="color:#89DDFF">()</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">  _foo</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> _asyncToGenerator</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF">*</span><span style="color:#82AAFF"> g_foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">url</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    try</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">      const</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF;font-style:italic"> yield</span><span style="color:#82AAFF"> fetch</span><span style="color:#F07178">(</span><span style="color:#BABED8">url</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#BABED8">      console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF;font-style:italic">yield</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">text</span><span style="color:#F07178">())</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#89DDFF;font-style:italic"> catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">err</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">      console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">fetch failed</span><span style="color:#89DDFF">'</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF">  }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> _foo</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this,</span><span style="color:#BABED8"> arguments</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,L,A,es="Babel 替我们生成了两个 helper 函数，如果我们对它稍加简化，可以得到：",J,P,ms=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> _asyncToGenerator</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#C792EA"> function</span><span style="color:#89DDFF"> ()</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">    var</span><span style="color:#BABED8"> gen</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> fn</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this,</span><span style="color:#BABED8"> arguments</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    return</span><span style="color:#89DDFF"> new</span><span style="color:#FFCB6B"> Promise</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">      function</span><span style="color:#82AAFF"> step</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">key</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> arg</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">        var</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> gen</span><span style="color:#F07178">[</span><span style="color:#BABED8">key</span><span style="color:#F07178">](</span><span style="color:#BABED8">arg</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#C792EA">        var</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">value</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">       if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#82AAFF">          resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">        }</span><span style="color:#89DDFF;font-style:italic"> else</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">          // 如果value不是一个promise，则将它转化成一个resolved promise</span></span>
<span class="line"><span style="color:#FFCB6B">          Promise</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">val</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#82AAFF">            step</span><span style="color:#F07178">(</span><span style="color:#89DDFF">"</span><span style="color:#C3E88D">next</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">          },</span><span style="color:#C792EA"> function</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#82AAFF">            step</span><span style="color:#F07178">(</span><span style="color:#89DDFF">"</span><span style="color:#C3E88D">throw</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">          }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">        }</span></span>
<span class="line"><span style="color:#89DDFF">      }</span></span>
<span class="line"><span style="color:#82AAFF">      step</span><span style="color:#F07178">(</span><span style="color:#89DDFF">"</span><span style="color:#C3E88D">next</span><span style="color:#89DDFF">"</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">  };</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,M,B,ts="生成器 Generator",O,E,cs="在这里例子中异步函数被转换成了生成器函数。这里先简要回顾一下生成器：",R,f,rs="<li>通过<code>function* () {}</code>定义生成器函数，其返回一个生成器对象</li> <li>调用生成器函数的<code>.next()</code>方法后，开始执行生成器函数代码</li> <li>生成器对象中可使用<code>yield</code>关键字，生成器函数执行时遇到<code>yield</code>将暂停函数的执行，转而执行<code>.next()</code>之后的代码</li> <li>再次调用<code>.next()</code>方法时，从之前<code>yield</code>的位置继续执行</li>",N,d,Fs="生成器函数与主函数之间可进行数据传递：",U,u,ys='<li>主函数 -&gt; 生成器函数：<code>gen.next(val)</code> 参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/next#%E5%90%91%E7%94%9F%E6%88%90%E5%99%A8%E4%BC%A0%E5%80%BC" rel="nofollow">🔗</a></li> <li>生成器函数 -&gt; 主函数：<code>yield val</code></li>',V,v,Ds="<code>_asyncToGenerator </code>在干什么？",W,C,is="我们知道在<code>async</code>函数<code>await</code>一个 promise 对象，我们会等到它 fulfilled 以后开始执行后面的代码。在转换后的生成器函数中，<code>yield</code>相当于<code>await</code>。然后我们调用<code>gen.next()</code>方法执行生成器函数，取得<code>yield fetch(url)</code>中的 promise，并<code>.then()</code>方法中进行递归——调用<code>gen.next(arg)</code>继续执行生成器函数，promise resolve 的值通过<code>arg</code>传递给生成器函数, …",Z,m,As="具体步骤为：",I,x,Bs="<li><p>创建生成器对象<code>gen</code>，async 函数返回一个 promise</p></li> <li><p>执行传入 promise 的函数，调用<code>gen.next()</code>，引擎跳转到生成器函数<code>g_foo</code>开始执行</p></li> <li><p>遇到<code>yield</code>,暂停函数执行，<code>fetch(url)</code>返回一个 promise，并被传回给主函数，赋值给<code>info.value</code></p></li> <li><p>调用<code>promise.then</code>设置 resolved 后的回调函数，<code>_asyncToGenerator</code>结束运行</p></li> <li><p>此时将继续执行主函数中的剩余代码。</p></li> <li><p>当 fetch 从服务器得到数据后，执行回调函数，即<code>step</code>，并将promise resolved后的值传入其中</p></li> <li><p>重复执行2～6，知道生成器函数返回，<code>done</code>为真</p></li>",K,_,Es="浏览器（V8）实际是如何处理的？",Q,h,fs='根据 V8 官方的 <a href="https://v8.dev/blog/fast-async#async-functions" rel="nofollow">blog</a>，在 Node.js 12 的一系列优化后，<code>async</code>函数在内部被转化成了',X,k,xs=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">async</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">v</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">  const</span><span style="color:#BABED8"> w</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF;font-style:italic"> await</span><span style="color:#BABED8"> v</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> w</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8">resumable </span><span style="color:#C792EA">function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">v</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">  implicit_promise</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> createPromise</span><span style="color:#F07178">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 如果v不是promise，则将其转化成promise</span></span>
<span class="line"><span style="color:#BABED8">  promise</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> promiseResolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">v</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 设置fulfilled和rejected时的回调函数，恢复foo的运行</span></span>
<span class="line"><span style="color:#82AAFF">  performPromiseThen</span><span style="color:#F07178">(</span><span style="color:#BABED8">promise</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic">    res</span><span style="color:#C792EA"> =></span><span style="color:#82AAFF"> resume</span><span style="color:#F07178">(</span><span style="color:#89DDFF">&#x3C;&#x3C;</span><span style="color:#BABED8">foo</span><span style="color:#89DDFF">>>,</span><span style="color:#BABED8"> res</span><span style="color:#F07178">)</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic">    err</span><span style="color:#C792EA"> =></span><span style="color:#82AAFF"> throw</span><span style="color:#F07178">(</span><span style="color:#89DDFF">&#x3C;&#x3C;</span><span style="color:#BABED8">foo</span><span style="color:#89DDFF">>>,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 挂起foo，并返回隐式创建的promise</span></span>
<span class="line"><span style="color:#BABED8">  w</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> suspend</span><span style="color:#F07178">(</span><span style="color:#89DDFF">&#x3C;&#x3C;</span><span style="color:#BABED8">foo</span><span style="color:#89DDFF">>>,</span><span style="color:#BABED8"> implicit_promise</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#82AAFF">  resolvePromise</span><span style="color:#F07178">(</span><span style="color:#BABED8">implicit_promise</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> w</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,j,w,ds='观察发现代码结构其实与 Babel polyfill 十分相似，内部同样使用Promise，<code>resume</code>和<code>suspend</code>这些引擎内部函数与 generator 也有异曲同工之妙。<code>performPromiseThen</code>在引擎的微任务队列中创建了<a href="https://tc39.es/ecma262/#sec-promisereactionjob" rel="nofollow">PromiseReactionJob</a>,与回调函数绑定。当主函数运行完，且await的promise resolve了之后，执行微任务，恢复foo函数的执行。';return{c(){r=c("p"),r.innerHTML=ls,g=p(),F=c("h2"),F.textContent=ns,G=p(),y=c("p"),y.innerHTML=as,S=p(),D=c("p"),D.textContent=os,z=p(),b=new $(!1),T=p(),i=c("p"),i.textContent=ps,q=p(),H=new $(!1),L=p(),A=c("p"),A.textContent=es,J=p(),P=new $(!1),M=p(),B=c("h3"),B.textContent=ts,O=p(),E=c("p"),E.textContent=cs,R=p(),f=c("ul"),f.innerHTML=rs,N=p(),d=c("p"),d.textContent=Fs,U=p(),u=c("ul"),u.innerHTML=ys,V=p(),v=c("h3"),v.innerHTML=Ds,W=p(),C=c("p"),C.innerHTML=is,Z=p(),m=c("p"),m.textContent=As,I=p(),x=c("ol"),x.innerHTML=Bs,K=p(),_=c("h2"),_.textContent=Es,Q=p(),h=c("p"),h.innerHTML=fs,X=p(),k=new $(!1),j=p(),w=c("p"),w.innerHTML=ds,this.h()},l(s){r=e(s,"P",{"data-svelte-h":!0}),t(r)!=="svelte-1pzdxqk"&&(r.innerHTML=ls),g=o(s),F=e(s,"H2",{"data-svelte-h":!0}),t(F)!=="svelte-iv4go9"&&(F.textContent=ns),G=o(s),y=e(s,"P",{"data-svelte-h":!0}),t(y)!=="svelte-1js1eq2"&&(y.innerHTML=as),S=o(s),D=e(s,"P",{"data-svelte-h":!0}),t(D)!=="svelte-iplkh4"&&(D.textContent=os),z=o(s),b=Y(s,!1),T=o(s),i=e(s,"P",{"data-svelte-h":!0}),t(i)!=="svelte-1v7b1bz"&&(i.textContent=ps),q=o(s),H=Y(s,!1),L=o(s),A=e(s,"P",{"data-svelte-h":!0}),t(A)!=="svelte-1xhnxoj"&&(A.textContent=es),J=o(s),P=Y(s,!1),M=o(s),B=e(s,"H3",{"data-svelte-h":!0}),t(B)!=="svelte-1v7o2e2"&&(B.textContent=ts),O=o(s),E=e(s,"P",{"data-svelte-h":!0}),t(E)!=="svelte-1o07asw"&&(E.textContent=cs),R=o(s),f=e(s,"UL",{"data-svelte-h":!0}),t(f)!=="svelte-3x9whi"&&(f.innerHTML=rs),N=o(s),d=e(s,"P",{"data-svelte-h":!0}),t(d)!=="svelte-ve19xp"&&(d.textContent=Fs),U=o(s),u=e(s,"UL",{"data-svelte-h":!0}),t(u)!=="svelte-wwpj3m"&&(u.innerHTML=ys),V=o(s),v=e(s,"H3",{"data-svelte-h":!0}),t(v)!=="svelte-1yulp3t"&&(v.innerHTML=Ds),W=o(s),C=e(s,"P",{"data-svelte-h":!0}),t(C)!=="svelte-i2knj2"&&(C.innerHTML=is),Z=o(s),m=e(s,"P",{"data-svelte-h":!0}),t(m)!=="svelte-1fjw9rp"&&(m.textContent=As),I=o(s),x=e(s,"OL",{"data-svelte-h":!0}),t(x)!=="svelte-vznels"&&(x.innerHTML=Bs),K=o(s),_=e(s,"H2",{"data-svelte-h":!0}),t(_)!=="svelte-s67dv6"&&(_.textContent=Es),Q=o(s),h=e(s,"P",{"data-svelte-h":!0}),t(h)!=="svelte-12kzb59"&&(h.innerHTML=fs),X=o(s),k=Y(s,!1),j=o(s),w=e(s,"P",{"data-svelte-h":!0}),t(w)!=="svelte-ntlq3a"&&(w.innerHTML=ds),this.h()},h(){b.a=T,H.a=L,P.a=M,k.a=j},m(s,l){a(s,r,l),a(s,g,l),a(s,F,l),a(s,G,l),a(s,y,l),a(s,S,l),a(s,D,l),a(s,z,l),b.m(vs,s,l),a(s,T,l),a(s,i,l),a(s,q,l),H.m(Cs,s,l),a(s,L,l),a(s,A,l),a(s,J,l),P.m(ms,s,l),a(s,M,l),a(s,B,l),a(s,O,l),a(s,E,l),a(s,R,l),a(s,f,l),a(s,N,l),a(s,d,l),a(s,U,l),a(s,u,l),a(s,V,l),a(s,v,l),a(s,W,l),a(s,C,l),a(s,Z,l),a(s,m,l),a(s,I,l),a(s,x,l),a(s,K,l),a(s,_,l),a(s,Q,l),a(s,h,l),a(s,X,l),k.m(xs,s,l),a(s,j,l),a(s,w,l)},p:ss,i:ss,o:ss,d(s){s&&(n(r),n(g),n(F),n(G),n(y),n(S),n(D),n(z),b.d(),n(T),n(i),n(q),H.d(),n(L),n(A),n(J),P.d(),n(M),n(B),n(O),n(E),n(R),n(f),n(N),n(d),n(U),n(u),n(V),n(v),n(W),n(C),n(Z),n(m),n(I),n(x),n(K),n(_),n(Q),n(h),n(X),k.d(),n(j),n(w))}}}const Ts={title:"async/await 是如何实现的？",date:"2022-07-17",summary:"ES2017 引入了`Async/Await`语法，使得我们的异步代码看起来更像是同步代码，隐藏了成堆的回调函数。但是 Javascript 引擎内部是如何实现的呢？",updatedOn:"2025-08-16T15:41:37.970Z"},{title:Ps,date:Ms,summary:ks,updatedOn:js}=Ts;class gs extends hs{constructor(r){super(),ws(this,r,null,bs,_s,{})}}export{gs as default,Ts as metadata};
