import{s as qe,n as At,a as Ee}from"./scheduler.Bwf3gQP1.js";import{S as Oe,i as Se,d as l,a as n,b as Ut,s as Be,c as s,g as o,e as i,f as je,h as p,j as a,H as Ie}from"./index.BB1_hVuL.js";function ze(Pe){let C,Nt="什么是 React Fiber",g,f,Vt="React 16 起开始使用的 reconciler",tt,u,Zt="新特性",et,x,Gt="<li>将 reconciliation 变成<strong>可中断</strong>的工作方式</li> <li>React 可以可以按照不同更新任务的优先级来安排工作</li>",lt,v,Jt="解决了什么问题",nt,F,Kt=`之前不可中断的更新方式容易导致 JS 引擎运行时间过长，导致页面渲染流程被阻塞。
因为 React 16 使用的是 Stack Reconciler, 使用递归的方式遍历 Virtual DOM，整个工作在遍历完之前无法中断`,st,r,Qt="实现细节",it,y,Xt="引入 fiber 节点",pt,b,Yt="fiber 节点时一种 React 中的数据结构，每个 fiber 对应每个单独的 React Element, Virtual DOM 上的一个节点",at,W,ke=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">type</span><span style="color:#FFCB6B"> Fiber</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // 当前 Fiber 处理完成后返回的 Fiber 节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // 也就是父亲节点</span></span>
<span class="line"><span style="color:#F07178">    return</span><span style="color:#89DDFF">:</span><span style="color:#FFCB6B"> Fiber</span><span style="color:#89DDFF"> |</span><span style="color:#FFCB6B"> null</span><span style="color:#89DDFF">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // 执行当前的节点的孩子节点和兄弟节点</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // 因此 Fiber 兄弟之间、父子之间形成了链表</span></span>
<span class="line"><span style="color:#F07178">    child</span><span style="color:#89DDFF">:</span><span style="color:#FFCB6B"> Fiber</span><span style="color:#89DDFF"> |</span><span style="color:#FFCB6B"> null</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#F07178">    sibling</span><span style="color:#89DDFF">:</span><span style="color:#FFCB6B"> Fiber</span><span style="color:#89DDFF"> |</span><span style="color:#FFCB6B"> null</span><span style="color:#89DDFF">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // 与 Fiber 相关联的 React 实例</span></span>
<span class="line"><span style="color:#F07178">    stateNode</span><span style="color:#89DDFF">:</span><span style="color:#FFCB6B"> any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // 指向 effect list 链表中的下一个具有 side effect 的 Fiber</span></span>
<span class="line"><span style="color:#F07178">    nextEffect</span><span style="color:#89DDFF">:</span><span style="color:#FFCB6B"> Fiber</span><span style="color:#89DDFF"> |</span><span style="color:#FFCB6B"> null</span><span style="color:#89DDFF">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // ...</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,$,_,Wt="可以看到单个 fiber 包含指向 <code>child</code>, <code>parent</code>, <code>sibling</code> 的指针，因此可以理解为添加了链表的树，或图",ot,H,$t="Fiber 的遍历方式",ct,m,gt="<p>TL;DR <strong>非递归</strong>的 DFS</p>",Ct,L,te="由于每个 fiber 包含上述相关 fiber 的指针，因此每个 fiber 处理结束后可以返回下一个需要处理的 fiber 是什么。这为 Fiber 树更新阶段的<strong>可中断</strong>特性提供基础。程序不再需要依靠调用栈来跟踪它在树中的位置以供回溯 ( 递归遍历树的原理 )",ft,T,ee="页面初始渲染时期",ut,D,le="DFS 遍历为每个 React element 创建 fiber，形成 Fiber Tree",xt,c,ne,vt,M,se="页面更新时期",Ft,h,ie="与之前不同的是，对于每一个更新任务，React Fiber 将更新过程分为两个阶段：渲染阶段和提交 commit 阶段",rt,w,pe="渲染阶段 ( reconcilation )",yt,d,ae="<li>可中断</li>",bt,R,oe="Fiber 对树进行遍历，并根据需要做的更新生成新的 wip ( work-in-progress ) 树。树的遍历与二叉树的先序遍历很像",_t,B,ce="<li>从根节点开始遍历</li> <li>处理当前节点</li> <li>如果有数据结构中的 <code>child</code> 属性判断是否存在孩子节点，有则跳转都孩子节点，并重复 2</li> <li>如果已经是叶子节点了，则判断是否存在兄弟节点，有则跳转到兄弟节点，并重复 2</li> <li>如果没有未访问的兄弟节点和孩子节点了，则宣布该节点已完成，返回父亲节点</li>",Ht,P,Ce=`在处理节点的过程中，如果该节点需要更新，则对该节点打上标记。
当节点为已完成状态时，如果它身上有标记，则将它添加到名为 <code>effect list</code> 的链表中，等待 commit 阶段统一更新。`,mt,k,fe="commit 阶段",Lt,q,ue="<li>不可中断</li>",Tt,E,xe="在这一阶段，React 首先按照 <code>effect list</code> 中的顺序将所有变更更新到 DOM 上，并执行相应的生命周期函数 ( 对于 class component 是这样 ) 。",Dt,O,ve="总结以上两个阶段，对于一个更新任务来说，我们可以这样理解：",Mt,S,Fe=`一个任务可分为 fiber1|fiber2|fiber3|…|fiberX| ( commit ) 这样的工作单元序列。
在所有 <code>|</code> 的地方，都是可中断的 ( 注意：不是一定会中断 ) 。`,ht,j,re="分配优先级",wt,I,ye="页面运行过程中的更新任务被依次加入在 <code>update queue</code> 中。React 中每一种任务有不同的优先级：",dt,z,be=`<li>Synchronous，
与 Stack Reconciliation 类似</li> <li>Task，
需要在下一个事件循环周期前完成</li> <li>Animation ( 动画 ) ，
需要在下一帧重绘前完成</li> <li>High，
高优先级的任务可以插队到低优先级任务之前</li> <li>Low，
如远程数据请求，更新的略微延迟 ( 几百毫秒 ) 相比于之前的网络传输可以忽略不记</li> <li>Offscreen，对隐藏的元素或者暂时不在屏幕中的元素进行更新，为将来的显示做准备</li>`,Rt,U,_e="如何调度",Bt,A,He="对于 High, Low, Offscreen 任务，React 会调用 <code>requestIdleCallback</code>，告诉浏览器在每一帧的空闲时间执行。",Pt,N,me="拿低优先级的更新任务举例，每执行完一个工作单元 ( 也就是一个 fiber ) 后，调度器都会查看下一帧开始前的剩余时间。如果还有时间，则会执行下一个工作单元。此时假设有其他高优先级的任务出现，调度器并不会立即执行它，而是仍会执行当前任务，直到剩余时间用尽。",kt,V,Le="如果时间用尽前，当前任务仍然没有完成，那么 React 会在结束前继续调用 <code>requestIdCallback</code>, 在下一个空闲时段继续剩下的工作",qt,Z,Te="当剩余时间用尽后，调度器根据 <code>update queue</code> 中的认识的优先级选择更新任务执行。此前出现的高优先级任务此时会被优先执行。执行时，调度会丢弃进行到一半的低优先级任务的工作成果，并在高优先级任务结束后再重新执行原先的低等级任务。",Et,G,De="更新",Ot,J,Me='React已经不再使用<code>requestIdleCallback</code>，而是使用自己的<a href="https://github.com/facebook/react/tree/main/packages/scheduler" rel="nofollow">scheduler</a>',St,K,he="总结",jt,Q,we="React Fiber 本质上就是使用非递归的方式更新 fiber 树，使得 React 不再为了遍历完整棵树而一直霸占 Main Thread。同时吸取了与显卡渲染中的双缓存机制类似的概念，在可中断的同时保证页面的一致性。",It,X,de="参考",zt,Y,Re=`<a href="https://www.velotio.com/engineering-blog/react-fiber-algorithm" rel="nofollow">An Introduction to React Fiber - The Algorithm Behind React</a> \\
<a href="https://www.youtube.com/watch?v=ZCuYPiUIONs" rel="nofollow">A Cartoon Intro To Fiber - React Conf 2017</a>`;return{c(){C=p("h2"),C.textContent=Nt,g=a(),f=p("p"),f.textContent=Vt,tt=a(),u=p("h2"),u.textContent=Zt,et=a(),x=p("ul"),x.innerHTML=Gt,lt=a(),v=p("h2"),v.textContent=Jt,nt=a(),F=p("p"),F.textContent=Kt,st=a(),r=p("h2"),r.textContent=Qt,it=a(),y=p("h3"),y.textContent=Xt,pt=a(),b=p("p"),b.textContent=Yt,at=a(),W=new Ie(!1),$=a(),_=p("p"),_.innerHTML=Wt,ot=a(),H=p("h3"),H.textContent=$t,ct=a(),m=p("blockquote"),m.innerHTML=gt,Ct=a(),L=p("p"),L.innerHTML=te,ft=a(),T=p("h3"),T.textContent=ee,ut=a(),D=p("p"),D.textContent=le,xt=a(),c=p("img"),vt=a(),M=p("h3"),M.textContent=se,Ft=a(),h=p("p"),h.textContent=ie,rt=a(),w=p("h4"),w.textContent=pe,yt=a(),d=p("ul"),d.innerHTML=ae,bt=a(),R=p("p"),R.textContent=oe,_t=a(),B=p("ol"),B.innerHTML=ce,Ht=a(),P=p("p"),P.innerHTML=Ce,mt=a(),k=p("h4"),k.textContent=fe,Lt=a(),q=p("ul"),q.innerHTML=ue,Tt=a(),E=p("p"),E.innerHTML=xe,Dt=a(),O=p("p"),O.textContent=ve,Mt=a(),S=p("p"),S.innerHTML=Fe,ht=a(),j=p("h4"),j.textContent=re,wt=a(),I=p("p"),I.innerHTML=ye,dt=a(),z=p("ul"),z.innerHTML=be,Rt=a(),U=p("h4"),U.textContent=_e,Bt=a(),A=p("p"),A.innerHTML=He,Pt=a(),N=p("p"),N.textContent=me,kt=a(),V=p("p"),V.innerHTML=Le,qt=a(),Z=p("p"),Z.innerHTML=Te,Et=a(),G=p("h5"),G.textContent=De,Ot=a(),J=p("p"),J.innerHTML=Me,St=a(),K=p("h2"),K.textContent=he,jt=a(),Q=p("p"),Q.textContent=we,It=a(),X=p("h2"),X.textContent=de,zt=a(),Y=p("p"),Y.innerHTML=Re,this.h()},l(t){C=s(t,"H2",{"data-svelte-h":!0}),o(C)!=="svelte-7oxs4e"&&(C.textContent=Nt),g=i(t),f=s(t,"P",{"data-svelte-h":!0}),o(f)!=="svelte-vru35"&&(f.textContent=Vt),tt=i(t),u=s(t,"H2",{"data-svelte-h":!0}),o(u)!=="svelte-9rymoy"&&(u.textContent=Zt),et=i(t),x=s(t,"UL",{"data-svelte-h":!0}),o(x)!=="svelte-2v8ci0"&&(x.innerHTML=Gt),lt=i(t),v=s(t,"H2",{"data-svelte-h":!0}),o(v)!=="svelte-tptjs8"&&(v.textContent=Jt),nt=i(t),F=s(t,"P",{"data-svelte-h":!0}),o(F)!=="svelte-12fjmnc"&&(F.textContent=Kt),st=i(t),r=s(t,"H2",{"data-svelte-h":!0}),o(r)!=="svelte-wdip0c"&&(r.textContent=Qt),it=i(t),y=s(t,"H3",{"data-svelte-h":!0}),o(y)!=="svelte-1wp0vu1"&&(y.textContent=Xt),pt=i(t),b=s(t,"P",{"data-svelte-h":!0}),o(b)!=="svelte-16pl530"&&(b.textContent=Yt),at=i(t),W=je(t,!1),$=i(t),_=s(t,"P",{"data-svelte-h":!0}),o(_)!=="svelte-sq0izv"&&(_.innerHTML=Wt),ot=i(t),H=s(t,"H3",{"data-svelte-h":!0}),o(H)!=="svelte-7vrnet"&&(H.textContent=$t),ct=i(t),m=s(t,"BLOCKQUOTE",{"data-svelte-h":!0}),o(m)!=="svelte-veox4u"&&(m.innerHTML=gt),Ct=i(t),L=s(t,"P",{"data-svelte-h":!0}),o(L)!=="svelte-150ho7i"&&(L.innerHTML=te),ft=i(t),T=s(t,"H3",{"data-svelte-h":!0}),o(T)!=="svelte-1qiq7gr"&&(T.textContent=ee),ut=i(t),D=s(t,"P",{"data-svelte-h":!0}),o(D)!=="svelte-kufldf"&&(D.textContent=le),xt=i(t),c=s(t,"IMG",{src:!0,width:!0,height:!0,alt:!0,style:!0}),vt=i(t),M=s(t,"H3",{"data-svelte-h":!0}),o(M)!=="svelte-1l10cck"&&(M.textContent=se),Ft=i(t),h=s(t,"P",{"data-svelte-h":!0}),o(h)!=="svelte-161plz4"&&(h.textContent=ie),rt=i(t),w=s(t,"H4",{"data-svelte-h":!0}),o(w)!=="svelte-13hg7xt"&&(w.textContent=pe),yt=i(t),d=s(t,"UL",{"data-svelte-h":!0}),o(d)!=="svelte-1ty844a"&&(d.innerHTML=ae),bt=i(t),R=s(t,"P",{"data-svelte-h":!0}),o(R)!=="svelte-16lbz47"&&(R.textContent=oe),_t=i(t),B=s(t,"OL",{"data-svelte-h":!0}),o(B)!=="svelte-1a7i3uv"&&(B.innerHTML=ce),Ht=i(t),P=s(t,"P",{"data-svelte-h":!0}),o(P)!=="svelte-1kcy8c2"&&(P.innerHTML=Ce),mt=i(t),k=s(t,"H4",{"data-svelte-h":!0}),o(k)!=="svelte-m2gots"&&(k.textContent=fe),Lt=i(t),q=s(t,"UL",{"data-svelte-h":!0}),o(q)!=="svelte-xt5il1"&&(q.innerHTML=ue),Tt=i(t),E=s(t,"P",{"data-svelte-h":!0}),o(E)!=="svelte-1ewpo41"&&(E.innerHTML=xe),Dt=i(t),O=s(t,"P",{"data-svelte-h":!0}),o(O)!=="svelte-1dd6ada"&&(O.textContent=ve),Mt=i(t),S=s(t,"P",{"data-svelte-h":!0}),o(S)!=="svelte-15k4t32"&&(S.innerHTML=Fe),ht=i(t),j=s(t,"H4",{"data-svelte-h":!0}),o(j)!=="svelte-jtggqs"&&(j.textContent=re),wt=i(t),I=s(t,"P",{"data-svelte-h":!0}),o(I)!=="svelte-1k2s9pf"&&(I.innerHTML=ye),dt=i(t),z=s(t,"UL",{"data-svelte-h":!0}),o(z)!=="svelte-1bf0c2q"&&(z.innerHTML=be),Rt=i(t),U=s(t,"H4",{"data-svelte-h":!0}),o(U)!=="svelte-1q0wxea"&&(U.textContent=_e),Bt=i(t),A=s(t,"P",{"data-svelte-h":!0}),o(A)!=="svelte-18dnt40"&&(A.innerHTML=He),Pt=i(t),N=s(t,"P",{"data-svelte-h":!0}),o(N)!=="svelte-cc18e2"&&(N.textContent=me),kt=i(t),V=s(t,"P",{"data-svelte-h":!0}),o(V)!=="svelte-1s4nw7o"&&(V.innerHTML=Le),qt=i(t),Z=s(t,"P",{"data-svelte-h":!0}),o(Z)!=="svelte-z0pwrz"&&(Z.innerHTML=Te),Et=i(t),G=s(t,"H5",{"data-svelte-h":!0}),o(G)!=="svelte-d26eo"&&(G.textContent=De),Ot=i(t),J=s(t,"P",{"data-svelte-h":!0}),o(J)!=="svelte-1lgqzwy"&&(J.innerHTML=Me),St=i(t),K=s(t,"H2",{"data-svelte-h":!0}),o(K)!=="svelte-1jqwil4"&&(K.textContent=he),jt=i(t),Q=s(t,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-1ej9hpj"&&(Q.textContent=we),It=i(t),X=s(t,"H2",{"data-svelte-h":!0}),o(X)!=="svelte-1088wxh"&&(X.textContent=de),zt=i(t),Y=s(t,"P",{"data-svelte-h":!0}),o(Y)!=="svelte-swki4c"&&(Y.innerHTML=Re),this.h()},h(){W.a=$,Ee(c.src,ne="/blog-images/fiber-tree.png")||Ut(c,"src",ne),Ut(c,"width",1295/2),Ut(c,"height",1065/2),Ut(c,"alt","fiber tree"),Be(c,"margin","0 auto"),Be(c,"display","block")},m(t,e){n(t,C,e),n(t,g,e),n(t,f,e),n(t,tt,e),n(t,u,e),n(t,et,e),n(t,x,e),n(t,lt,e),n(t,v,e),n(t,nt,e),n(t,F,e),n(t,st,e),n(t,r,e),n(t,it,e),n(t,y,e),n(t,pt,e),n(t,b,e),n(t,at,e),W.m(ke,t,e),n(t,$,e),n(t,_,e),n(t,ot,e),n(t,H,e),n(t,ct,e),n(t,m,e),n(t,Ct,e),n(t,L,e),n(t,ft,e),n(t,T,e),n(t,ut,e),n(t,D,e),n(t,xt,e),n(t,c,e),n(t,vt,e),n(t,M,e),n(t,Ft,e),n(t,h,e),n(t,rt,e),n(t,w,e),n(t,yt,e),n(t,d,e),n(t,bt,e),n(t,R,e),n(t,_t,e),n(t,B,e),n(t,Ht,e),n(t,P,e),n(t,mt,e),n(t,k,e),n(t,Lt,e),n(t,q,e),n(t,Tt,e),n(t,E,e),n(t,Dt,e),n(t,O,e),n(t,Mt,e),n(t,S,e),n(t,ht,e),n(t,j,e),n(t,wt,e),n(t,I,e),n(t,dt,e),n(t,z,e),n(t,Rt,e),n(t,U,e),n(t,Bt,e),n(t,A,e),n(t,Pt,e),n(t,N,e),n(t,kt,e),n(t,V,e),n(t,qt,e),n(t,Z,e),n(t,Et,e),n(t,G,e),n(t,Ot,e),n(t,J,e),n(t,St,e),n(t,K,e),n(t,jt,e),n(t,Q,e),n(t,It,e),n(t,X,e),n(t,zt,e),n(t,Y,e)},p:At,i:At,o:At,d(t){t&&(l(C),l(g),l(f),l(tt),l(u),l(et),l(x),l(lt),l(v),l(nt),l(F),l(st),l(r),l(it),l(y),l(pt),l(b),l(at),W.d(),l($),l(_),l(ot),l(H),l(ct),l(m),l(Ct),l(L),l(ft),l(T),l(ut),l(D),l(xt),l(c),l(vt),l(M),l(Ft),l(h),l(rt),l(w),l(yt),l(d),l(bt),l(R),l(_t),l(B),l(Ht),l(P),l(mt),l(k),l(Lt),l(q),l(Tt),l(E),l(Dt),l(O),l(Mt),l(S),l(ht),l(j),l(wt),l(I),l(dt),l(z),l(Rt),l(U),l(Bt),l(A),l(Pt),l(N),l(kt),l(V),l(qt),l(Z),l(Et),l(G),l(Ot),l(J),l(St),l(K),l(jt),l(Q),l(It),l(X),l(zt),l(Y))}}}const Ue={title:"谈谈 React Fiber",date:"2022-10-22",summary:"React Fiber 的原理",updatedOn:"2025-08-16T15:41:37.975Z"},{title:Ve,date:Ze,summary:Ge,updatedOn:Je}=Ue;class Ke extends Oe{constructor(C){super(),Se(this,C,null,ze,qe,{})}}export{Ke as default,Ue as metadata};
