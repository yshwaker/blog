import{s as Re,n as fe}from"./scheduler.Bwf3gQP1.js";import{S as Ue,i as Xe,d as l,a as t,c as p,g as o,e as a,f as r,h as c,j as n,H as y}from"./index.BB1_hVuL.js";function Ye(je){let i,me="最近在学习 Operating System，作业需要使用 C 语言在一个 toy OS 中进行编程与学习。 在原始提供的源码中，发现有许多 <code>static</code> 和 <code>extern</code> 的关键字，故在此做一下总结与整理。",U,F,xe="extern",X,D,ve=`首先来看一下 <code>extern</code>。其最主要的作用就是可以引用工程的其他文件中定义的变量或函数。
假设有两个文件 <code>foo1.c</code> 和 <code>foo2.c</code>：`,Y,d,ue="foo1.c",$,P,Ge='<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">int</span><span style="color:#BABED8"> var</span><span style="color:#89DDFF">;</span></span></code></pre>',q,C,_e="foo2.c",g,O,Ze='<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">extern</span><span style="color:#C792EA"> int</span><span style="color:#BABED8"> var</span><span style="color:#89DDFF">;</span></span></code></pre>',S,f,be="最终生成可执行文件时，需要分别编译 compile 和链接 link：",ee,z,Ne=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#FFCB6B">gcc</span><span style="color:#C3E88D"> -c</span><span style="color:#C3E88D"> foo1.c</span></span>
<span class="line"><span style="color:#FFCB6B">gcc</span><span style="color:#C3E88D"> -c</span><span style="color:#C3E88D"> foo2.c</span></span>
<span class="line"><span style="color:#FFCB6B">gcc</span><span style="color:#C3E88D"> foo1.o</span><span style="color:#C3E88D"> foo2.o</span><span style="color:#C3E88D"> -o</span><span style="color:#C3E88D"> foo</span><span style="color:#C3E88D">  //</span><span style="color:#C3E88D"> link</span></span></code></pre>`,V,m,Ee="在编译过程中，编译器只会为 <code>foo2.c</code> 中的 var 分配内存，在 <code>foo1.c</code> 中仅仅生成一个名为 var 的 symbol。而后在 link 过程中，链接器会将该 symbol 替换为 <code>foo2.c</code> 中的 var 的内存地址，从而达到指向同一变量的目的。",se,x,Ae=`<code>extern</code> 的实际应用场景主要在编写库 library。打个比方，假设有名为 Mylib 的库，包含 <code>Mylib.c</code> 和 <code>Mylib.h</code>。
MyLib.c:`,le,j,Qe='<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">int</span><span style="color:#BABED8"> Variable</span><span style="color:#89DDFF">;</span></span></code></pre>',G,v,we="MyLib.h:",te,Z,We='<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">extern</span><span style="color:#C792EA"> int</span><span style="color:#BABED8"> Variable</span><span style="color:#89DDFF">;</span></span></code></pre>',N,u,He="main.c:",ae,Q,Ie=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic"># include</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">MyLib.h</span><span style="color:#89DDFF">"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">int</span><span style="color:#82AAFF"> main</span><span style="color:#89DDFF"> (</span><span style="color:#C792EA"> void</span><span style="color:#89DDFF"> )</span></span>
<span class="line"><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#F07178">    Variable </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#82AAFF">    printf</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> "</span><span style="color:#F07178">%d</span><span style="color:#BABED8">
</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#F07178"> Variable </span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> ;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    return</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,W,_,Me="在。h 文件中使用 <code>extern</code> 来引用。c 库文件中定义的变量后，用户即可通过 include 头文件来使用库中的变量。",ne,b,Le="static",pe,E,Te=`回到之前提到的例子，如果 <code>foo2.c</code> 中的 <code>extern</code> 去掉又会怎样呢。
对于未初始化的变量，GCC 会默认将它们视为同一个变量，效果与 <code>extern</code> GCC 会报错：`,oe,I,Je=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span>/tmp/ccFN6SQZ.o: ( .data+0x0 ) : multiple definition of \`var'</span></span>
<span class="line"><span>/tmp/ccbc0T4O.o: ( .data+0x0 ) : first defined here</span></span></code></pre>`,J,A,he="假设 <code>foo1.c</code> 与 <code>foo2.c</code> 分别来自于两个不同的库，如果用户想要同时 include 这两种库时，就会产生 multiple definition 的错误。作为库的开发者，有责任防止这种多重定义的情况的发生，因此需要用到 <code>static。</code>",ce,w,ke="<code>static</code> 保证了定义的变量和函数只存在该文件范围内，其他的文件无法 link 这些变量和函数，从而避免了多重定义的问题。",ie,H,Be="除此之外，定义在函数中 <code>static</code> 变量在函数被调用后可维持该变量的值。",re,M,Pe="来看一下下面的例子：",ye,K,Ke=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">void</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> )</span></span>
<span class="line"><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#C792EA">    int</span><span style="color:#F07178"> a </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#C792EA">    static</span><span style="color:#C792EA"> int</span><span style="color:#F07178"> sa </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">    a </span><span style="color:#89DDFF">+=</span><span style="color:#F78C6C"> 5</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#F07178">    sa </span><span style="color:#89DDFF">+=</span><span style="color:#F78C6C"> 5</span><span style="color:#89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF">    printf</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">a = </span><span style="color:#F07178">%d</span><span style="color:#C3E88D">, sa = </span><span style="color:#F07178">%d</span><span style="color:#BABED8">
</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#F07178"> a</span><span style="color:#89DDFF">,</span><span style="color:#F07178"> sa </span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> ;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">int</span><span style="color:#82AAFF"> main</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> )</span></span>
<span class="line"><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#C792EA">    int</span><span style="color:#F07178"> i</span><span style="color:#89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    for</span><span style="color:#89DDFF"> (</span><span style="color:#F07178"> i </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span><span style="color:#F07178"> i </span><span style="color:#89DDFF">&#x3C;</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> ++</span><span style="color:#F07178">i </span><span style="color:#89DDFF">)</span></span>
<span class="line"><span style="color:#82AAFF">        foo</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> )</span><span style="color:#89DDFF"> ;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,R,L,qe="这种情况下，main 函数调用 <code>foo</code> 函数，在 <code>foo</code> 执行完退出后，<code>sa</code> 变量仍然保持其退出前的值。当 <code>foo</code> 被在此调用的时候，<code>sa</code> 会在原来的基础上再加 <code>5</code>。",Fe,T,Oe="当我们需用保留调用函数的某种状态而又不想创建全局变量时，这种方法就显得比较有用。然而，这种方法的滥用会导致程序的可读性和线程安全，所以需要谨慎使用。",De,h,Se="在 C++中，<code>static</code> 还可用于 class 属性，在此不再赘述。",de,k,ze="参考：",Ce,B,Ve='<li><a href="http://stackoverflow.com/questions/572547/what-does-static-mean-in-a-c-program/572550#572550" rel="nofollow">stackoverflow</a></li> <li><a href="https://www.quora.com/What-is-the-deep-difference-between-static-extern-declaration-in-C-C++-programming" rel="nofollow">quora</a></li>';return{c(){i=c("p"),i.innerHTML=me,U=n(),F=c("h2"),F.textContent=xe,X=n(),D=c("p"),D.innerHTML=ve,Y=n(),d=c("p"),d.textContent=ue,$=n(),P=new y(!1),q=n(),C=c("p"),C.textContent=_e,g=n(),O=new y(!1),S=n(),f=c("p"),f.textContent=be,ee=n(),z=new y(!1),V=n(),m=c("p"),m.innerHTML=Ee,se=n(),x=c("p"),x.innerHTML=Ae,le=n(),j=new y(!1),G=n(),v=c("p"),v.textContent=we,te=n(),Z=new y(!1),N=n(),u=c("p"),u.textContent=He,ae=n(),Q=new y(!1),W=n(),_=c("p"),_.innerHTML=Me,ne=n(),b=c("h2"),b.textContent=Le,pe=n(),E=c("p"),E.innerHTML=Te,oe=n(),I=new y(!1),J=n(),A=c("p"),A.innerHTML=he,ce=n(),w=c("p"),w.innerHTML=ke,ie=n(),H=c("p"),H.innerHTML=Be,re=n(),M=c("p"),M.textContent=Pe,ye=n(),K=new y(!1),R=n(),L=c("p"),L.innerHTML=qe,Fe=n(),T=c("p"),T.textContent=Oe,De=n(),h=c("p"),h.innerHTML=Se,de=n(),k=c("h2"),k.textContent=ze,Ce=n(),B=c("ol"),B.innerHTML=Ve,this.h()},l(e){i=p(e,"P",{"data-svelte-h":!0}),o(i)!=="svelte-1oc8hyt"&&(i.innerHTML=me),U=a(e),F=p(e,"H2",{"data-svelte-h":!0}),o(F)!=="svelte-7p6yzg"&&(F.textContent=xe),X=a(e),D=p(e,"P",{"data-svelte-h":!0}),o(D)!=="svelte-ntnl3y"&&(D.innerHTML=ve),Y=a(e),d=p(e,"P",{"data-svelte-h":!0}),o(d)!=="svelte-1azy6yo"&&(d.textContent=ue),$=a(e),P=r(e,!1),q=a(e),C=p(e,"P",{"data-svelte-h":!0}),o(C)!=="svelte-1rp1czn"&&(C.textContent=_e),g=a(e),O=r(e,!1),S=a(e),f=p(e,"P",{"data-svelte-h":!0}),o(f)!=="svelte-18y02sb"&&(f.textContent=be),ee=a(e),z=r(e,!1),V=a(e),m=p(e,"P",{"data-svelte-h":!0}),o(m)!=="svelte-1c22xm6"&&(m.innerHTML=Ee),se=a(e),x=p(e,"P",{"data-svelte-h":!0}),o(x)!=="svelte-a2qgak"&&(x.innerHTML=Ae),le=a(e),j=r(e,!1),G=a(e),v=p(e,"P",{"data-svelte-h":!0}),o(v)!=="svelte-1bae00x"&&(v.textContent=we),te=a(e),Z=r(e,!1),N=a(e),u=p(e,"P",{"data-svelte-h":!0}),o(u)!=="svelte-pgzmrw"&&(u.textContent=He),ae=a(e),Q=r(e,!1),W=a(e),_=p(e,"P",{"data-svelte-h":!0}),o(_)!=="svelte-wvwdek"&&(_.innerHTML=Me),ne=a(e),b=p(e,"H2",{"data-svelte-h":!0}),o(b)!=="svelte-1dv68q0"&&(b.textContent=Le),pe=a(e),E=p(e,"P",{"data-svelte-h":!0}),o(E)!=="svelte-2tqxw9"&&(E.innerHTML=Te),oe=a(e),I=r(e,!1),J=a(e),A=p(e,"P",{"data-svelte-h":!0}),o(A)!=="svelte-1sj5yys"&&(A.innerHTML=he),ce=a(e),w=p(e,"P",{"data-svelte-h":!0}),o(w)!=="svelte-1u2acfa"&&(w.innerHTML=ke),ie=a(e),H=p(e,"P",{"data-svelte-h":!0}),o(H)!=="svelte-1wte2m5"&&(H.innerHTML=Be),re=a(e),M=p(e,"P",{"data-svelte-h":!0}),o(M)!=="svelte-uk8qbh"&&(M.textContent=Pe),ye=a(e),K=r(e,!1),R=a(e),L=p(e,"P",{"data-svelte-h":!0}),o(L)!=="svelte-d36lml"&&(L.innerHTML=qe),Fe=a(e),T=p(e,"P",{"data-svelte-h":!0}),o(T)!=="svelte-mmud52"&&(T.textContent=Oe),De=a(e),h=p(e,"P",{"data-svelte-h":!0}),o(h)!=="svelte-x12kz1"&&(h.innerHTML=Se),de=a(e),k=p(e,"H2",{"data-svelte-h":!0}),o(k)!=="svelte-1seyrq7"&&(k.textContent=ze),Ce=a(e),B=p(e,"OL",{"data-svelte-h":!0}),o(B)!=="svelte-x4y05p"&&(B.innerHTML=Ve),this.h()},h(){P.a=q,O.a=S,z.a=V,j.a=G,Z.a=N,Q.a=W,I.a=J,K.a=R},m(e,s){t(e,i,s),t(e,U,s),t(e,F,s),t(e,X,s),t(e,D,s),t(e,Y,s),t(e,d,s),t(e,$,s),P.m(Ge,e,s),t(e,q,s),t(e,C,s),t(e,g,s),O.m(Ze,e,s),t(e,S,s),t(e,f,s),t(e,ee,s),z.m(Ne,e,s),t(e,V,s),t(e,m,s),t(e,se,s),t(e,x,s),t(e,le,s),j.m(Qe,e,s),t(e,G,s),t(e,v,s),t(e,te,s),Z.m(We,e,s),t(e,N,s),t(e,u,s),t(e,ae,s),Q.m(Ie,e,s),t(e,W,s),t(e,_,s),t(e,ne,s),t(e,b,s),t(e,pe,s),t(e,E,s),t(e,oe,s),I.m(Je,e,s),t(e,J,s),t(e,A,s),t(e,ce,s),t(e,w,s),t(e,ie,s),t(e,H,s),t(e,re,s),t(e,M,s),t(e,ye,s),K.m(Ke,e,s),t(e,R,s),t(e,L,s),t(e,Fe,s),t(e,T,s),t(e,De,s),t(e,h,s),t(e,de,s),t(e,k,s),t(e,Ce,s),t(e,B,s)},p:fe,i:fe,o:fe,d(e){e&&(l(i),l(U),l(F),l(X),l(D),l(Y),l(d),l($),P.d(),l(q),l(C),l(g),O.d(),l(S),l(f),l(ee),z.d(),l(V),l(m),l(se),l(x),l(le),j.d(),l(G),l(v),l(te),Z.d(),l(N),l(u),l(ae),Q.d(),l(W),l(_),l(ne),l(b),l(pe),l(E),l(oe),I.d(),l(J),l(A),l(ce),l(w),l(ie),l(H),l(re),l(M),l(ye),K.d(),l(R),l(L),l(Fe),l(T),l(De),l(h),l(de),l(k),l(Ce),l(B))}}}const $e={title:"C语言中的static与extern",date:"2016-03-26",summary:"在学习 Operating System 时，作业需要使用 C 语言在一个 toy OS 中进行编程与学习。 在原始提供的源码中，发现有许多 static 和 extern 的关键字，故在此做一下总结与整理。",updatedOn:"2025-08-16T15:41:37.976Z"},{title:ss,date:ls,summary:ts,updatedOn:as}=$e;class ns extends Ue{constructor(i){super(),Xe(this,i,null,Ye,Re,{})}}export{ns as default,$e as metadata};
