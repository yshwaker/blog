import{s as ml,n as Ls}from"./scheduler.Bwf3gQP1.js";import{S as Cl,i as vl,d as a,a as n,c as e,g as t,e as p,f as r,h as c,j as o,H as F}from"./index.BB1_hVuL.js";function kl(Fl){let D,Rs="本文旨在通过实现一个 Promise 类来深入理解 Promise 的运行机制，虽然会提到一些 Promise 的基本概念，但最好先有一定了解， 可通过 MDN 进行查询",es,y,gs="术语",ts,i,Os="由于对 Reolve、Fulfill、Reject 之类的术语并没有十分统一的中文译名，本文将保留其英文名",cs,B,zs="Promise 的本质是一个状态机",rs,E,Qs="Promise 总共具有三个状态：Pending、Fulfilled、Rejected。在创建 Promise 对象时，会传入一个由开发者定义的函数 fn。开发者在其中自由的编写业务逻辑，可以是文件读取、网络请求，并通过调用 fn 的两个参数来控制 Promise 改变状态的实际。 Promise 本质就是一个这样的辅助工具，让开发者专注于业务逻辑。",Fs,A,qs="我们可以在 Chrome Devtool 中 print promise 对象来查看它当前的状态和终值（Eventual Value）",Ds,q,Dl=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#FFCB6B">Promise</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">resolve</span><span style="color:#BABED8">(</span><span style="color:#F78C6C">1</span><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#89DDFF">></span><span style="color:#FFCB6B"> Promise</span><span style="color:#89DDFF"> {&#x3C;</span><span style="color:#F07178">fulfilled</span><span style="color:#89DDFF">></span><span style="color:#BABED8">: 1}</span></span></code></pre>`,I,f,Is="所以实现 Promise 第一步就是实现一个状态机，定义这些状态，与转换状态的方法",ys,N,yl=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">class</span><span style="color:#FFCB6B"> MyPromise</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#F07178">  #state</span></span>
<span class="line"><span style="color:#BABED8">  #val </span><span style="color:#676E95;font-style:italic">// promise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">  constructor</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">val</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF">    fn</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#fulfill</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#reject</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #fulfill</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">fulfilled</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">val</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> value</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #reject</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">rejected</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">val</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> value</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,S,u,Ns="<code>.then</code> 函数",is,d,Ss="Promise 允许开发者在任意时间添加对 Promise 状态改变的监听，通过调用<code>.then(onFullfilled, OnRejected)</code>并传入两个回调函数实现。",Bs,h,Ys="注意开发者可多次调用<code>.then()</code>函数，如：",Es,Y,il=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">const</span><span style="color:#BABED8"> p </span><span style="color:#89DDFF">=</span><span style="color:#FFCB6B"> Promise</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">resolve</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">resolved</span><span style="color:#89DDFF">'</span><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#BABED8">p</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">v</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#BABED8"> console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#BABED8">(v))</span></span>
<span class="line"><span style="color:#BABED8">p</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">v</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#BABED8"> console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">Yeah!</span><span style="color:#89DDFF">'</span><span style="color:#BABED8">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF">></span><span style="color:#BABED8"> resolved</span></span>
<span class="line"><span style="color:#89DDFF">></span><span style="color:#BABED8"> Yeah</span><span style="color:#89DDFF">!</span></span></code></pre>`,$,m,$s="因此我们需要就这些 Handler 一次存储起来，在状态改变时依次调用。",As,U,Bl=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic">// mark</span></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> addToTaskQueue</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // link[11:14] https://zh.javascript.info/microtask-queue</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 模拟浏览器微任务</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#82AAFF">  setTimeout</span><span style="color:#F07178">(</span><span style="color:#BABED8">fn</span><span style="color:#89DDFF">,</span><span style="color:#F78C6C"> 0</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">class</span><span style="color:#FFCB6B"> MyPromise</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#F07178">  #state</span></span>
<span class="line"><span style="color:#BABED8">  #value </span><span style="color:#676E95;font-style:italic">// promise</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#F07178">  #handlers</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">  constructor</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF">    fn</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#fulfill</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#reject</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #fulfill</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">fulfilled</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF">.</span><span style="color:#F07178">forEach(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">handler</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#BABED8">      handler</span><span style="color:#89DDFF">.</span><span style="color:#F07178">onFulfilled(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span><span style="color:#676E95;font-style:italic"> // garbage collecting</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #reject</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">rejected</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF">.</span><span style="color:#F07178">forEach(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">handler</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#BABED8">      handler</span><span style="color:#89DDFF">.</span><span style="color:#F07178">onRejected(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span><span style="color:#676E95;font-style:italic"> // garbage collecting</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#F07178">  then</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">onFulfilled</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> onRejected</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#F07178">    addToTaskQueue(</span><span style="color:#89DDFF">()</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">      if</span><span style="color:#F07178"> (</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#89DDFF">        this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF">.</span><span style="color:#F07178">push(</span><span style="color:#89DDFF">{</span><span style="color:#BABED8"> onFulfilled</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> onRejected</span><span style="color:#89DDFF"> }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#89DDFF">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">      if</span><span style="color:#F07178"> (</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">fulfilled</span><span style="color:#89DDFF">'</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#F07178">        onFulfilled(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#89DDFF">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">      if</span><span style="color:#F07178"> (</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">rejected</span><span style="color:#89DDFF">'</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#F07178">        onRejected(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#89DDFF">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">// Test Code</span></span>
<span class="line"><span style="color:#C792EA">const</span><span style="color:#BABED8"> p </span><span style="color:#89DDFF">=</span><span style="color:#89DDFF"> new</span><span style="color:#82AAFF"> MyPromise</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#82AAFF">  setTimeout</span><span style="color:#F07178">(</span><span style="color:#89DDFF">()</span><span style="color:#C792EA"> =></span><span style="color:#82AAFF"> resolve</span><span style="color:#F07178">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">resolved!</span><span style="color:#89DDFF">'</span><span style="color:#F07178">)</span><span style="color:#89DDFF">,</span><span style="color:#F78C6C"> 1000</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">}</span><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#BABED8">p</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#BABED8">(</span></span>
<span class="line"><span style="color:#89DDFF">  (</span><span style="color:#BABED8;font-style:italic">res</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">    console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#BABED8">res</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  },</span></span>
<span class="line"><span style="color:#89DDFF">  (</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">    console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#BABED8">err</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#BABED8">console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">global</span><span style="color:#89DDFF">'</span><span style="color:#BABED8">)</span></span></code></pre>`,V,C,Us="由于 Promise 状态的改变可能在调用<code>then</code>之前或之后，所以需要在多处进行判断。",fs,v,Vs="在进行下一步之前，对代码的通用部分进行复用，添加类型检查：",us,Z,El=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">class</span><span style="color:#FFCB6B"> MyPromise</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#F07178">  #state</span></span>
<span class="line"><span style="color:#F07178">  #value</span></span>
<span class="line"><span style="color:#F07178">  #handlers</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">  constructor</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#F07178"> []</span></span>
<span class="line"><span style="color:#82AAFF">    fn</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#fulfill</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#reject</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #fulfill</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">fulfilled</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF">.</span><span style="color:#F07178">forEach(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#handle</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span><span style="color:#676E95;font-style:italic"> // garbage collecting</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #reject</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">rejected</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> err</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF">.</span><span style="color:#F07178">forEach(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#handle</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span><span style="color:#676E95;font-style:italic"> // garbage collecting</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#F07178">  #handle</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">handler</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#89DDFF">      this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF">.</span><span style="color:#F07178">push(</span><span style="color:#BABED8">handler</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">fulfilled</span><span style="color:#89DDFF">'</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">      handler</span><span style="color:#89DDFF">.</span><span style="color:#F07178">onFulfilled(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">rejected</span><span style="color:#89DDFF">'</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">      handler</span><span style="color:#89DDFF">.</span><span style="color:#F07178">onRejected(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  then</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">onFulfilled</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> onRejected</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#F07178">    addToTaskQueue(</span><span style="color:#89DDFF">()</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF">      this.</span><span style="color:#F07178">#handle(</span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">        onFulfilled</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#BABED8">        onRejected</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#89DDFF">      }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,G,k,Zs="<code>.then</code>的链式调用",ds,x,Gs='Promise 的一个重要特性，就是允许链式的调用，从而一定程度上避免了<a href="http://callbackhell.com/" rel="nofollow">回调地狱</a>的发生。为了做到这一点，我们需要将回调函数 onFulfilled/OnRejected 的返回值穿透到最外层，即创建并返回一个以回调函数返回值为内部状态的 Promise，以便进一步调用后续的<code>.then</code>方法。',hs,J,Al=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#82AAFF">then</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">onFulfilled</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> onRejected</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#C792EA">  const</span><span style="color:#BABED8"> nextPromise</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> new</span><span style="color:#82AAFF"> MyPromise</span><span style="color:#F07178">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#C792EA">    const</span><span style="color:#BABED8"> fullfillmentTask</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> ()</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#C792EA">      const</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF"> =</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#89DDFF">        typeof</span><span style="color:#BABED8"> onFulfilled</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">function</span><span style="color:#89DDFF">'</span><span style="color:#89DDFF"> ?</span><span style="color:#82AAFF"> onFulfilled</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#value</span><span style="color:#F07178">) </span><span style="color:#89DDFF">:</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#82AAFF">      resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#C792EA">    const</span><span style="color:#BABED8"> rejectionTask</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> ()</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#C792EA">      const</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF"> =</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">        // mark</span></span>
<span class="line"><span style="color:#89DDFF">        typeof</span><span style="color:#BABED8"> onRejected</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">function</span><span style="color:#89DDFF">'</span><span style="color:#89DDFF"> ?</span><span style="color:#82AAFF"> onRejected</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#value</span><span style="color:#F07178">) </span><span style="color:#89DDFF">:</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#82AAFF">      resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF">    addToTaskQueue</span><span style="color:#F07178">(</span><span style="color:#89DDFF">()</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">      this.</span><span style="color:#82AAFF">#handle</span><span style="color:#F07178">(</span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#F07178">        onFulfilled</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> fullfillmentTask</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#F07178">        onRejected</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> rejectionTask</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#89DDFF">      }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span><span style="color:#F07178">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> nextPromise</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">// test</span></span>
<span class="line"><span style="color:#C792EA">const</span><span style="color:#BABED8"> p </span><span style="color:#89DDFF">=</span><span style="color:#89DDFF"> new</span><span style="color:#82AAFF"> MyPromise</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#82AAFF">  setTimeout</span><span style="color:#F07178">(</span><span style="color:#89DDFF">()</span><span style="color:#C792EA"> =></span><span style="color:#82AAFF"> resolve</span><span style="color:#F07178">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">resolved!</span><span style="color:#89DDFF">'</span><span style="color:#F07178">)</span><span style="color:#89DDFF">,</span><span style="color:#F78C6C"> 1000</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">}</span><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#BABED8">p</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">res</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> res</span><span style="color:#89DDFF"> +</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">!!</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">}</span><span style="color:#BABED8">)</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">res</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">  console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#BABED8">res</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">}</span><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#BABED8">console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">global</span><span style="color:#89DDFF">'</span><span style="color:#BABED8">)</span></span></code></pre>`,K,_,Js="允许<code>.then</code>回调函数返回 Promise",ms,P,Ks="有的时候我们会希望回调函数返回一个 Promise，并当它 resolved 之后再触发之后 then 链中的函数回调，比如我们需要先发起一个请求获取一个 Id，再根据返回的 Id 请求其他数据。如：",Cs,W,fl=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">const</span><span style="color:#BABED8"> follower </span><span style="color:#89DDFF">=</span><span style="color:#82AAFF"> fetch</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">/followers</span><span style="color:#89DDFF">'</span><span style="color:#BABED8">)</span></span>
<span class="line"><span style="color:#C792EA">const</span><span style="color:#BABED8"> p </span><span style="color:#89DDFF">=</span><span style="color:#BABED8"> follower</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#BABED8">(</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">ids</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">  const</span><span style="color:#BABED8"> user</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> fetch</span><span style="color:#F07178">(</span><span style="color:#89DDFF">\`</span><span style="color:#C3E88D">/api/user/</span><span style="color:#89DDFF">\${</span><span style="color:#BABED8">id[</span><span style="color:#F78C6C">0</span><span style="color:#BABED8">]</span><span style="color:#89DDFF">}\`</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> user</span></span>
<span class="line"><span style="color:#89DDFF">}</span><span style="color:#BABED8">)</span></span></code></pre>`,X,b,Ws="此时，除<code>follower</code>外存在着两个 Promise，一个是<code>user</code> ，一个是<code>.then</code>方法需要返回并赋值给 p 的 Promise。它们的状态和终值应该是相互锁定的，即当第一个 Promise 状态改变时，第二个 Promise 也随之发生相同变化。因此我们需要扩展一下我们的<code>fulfill</code>方法",vs,ss,ul=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">class</span><span style="color:#FFCB6B"> MyPromise</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">  constructor</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#F07178"> []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#82AAFF">    fn</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this.</span><span style="color:#BABED8">#resolve</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#reject</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // mark</span></span>
<span class="line"><span style="color:#F07178">  #resolve</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (isPromise(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">      value</span><span style="color:#89DDFF">.</span><span style="color:#F07178">then(</span></span>
<span class="line"><span style="color:#89DDFF">        (</span><span style="color:#BABED8;font-style:italic">val</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">          this.</span><span style="color:#F07178">#resolve(</span><span style="color:#BABED8">val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">        },</span></span>
<span class="line"><span style="color:#89DDFF">        (</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">          this.</span><span style="color:#F07178">#reject(</span><span style="color:#BABED8">err</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">        }</span></span>
<span class="line"><span style="color:#F07178">      )</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#89DDFF;font-style:italic"> else</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">      this.</span><span style="color:#F07178">#fulfill(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,ls,T,Xs="让我们来捋一捋当<code>user</code>的这个 Promise 从服务器得到数据，状态改变前后都发生了什么：",ks,j,sl="<li>调用<code>.then</code>，将 fullfillmentTask 加入微任务队列， 返回新 Promise p。</li> <li>浏览器执行完主函数，开始执行微任务 fullfillmentTask。假设此时<code>follower</code>已完成，则立即执行<code>.then</code>传入的回调函数<code>(ids) =&gt; { return fetch(`/api/user/${id[0]}`) } </code>，并将返回值传给 p 的<code>resolve</code>方法执行</li> <li>由于返回值是一个 Promise，于是给它挂上回调函数，来监控其状态变化。注意此时 this 的上下文为 p</li> <li>某一时刻，<code>user</code> fetch 从服务器得到数据</li> <li>执行 3 中挂上的回调 <code>(val) =&gt; { this.#revolve(val) }</code>, 调用 p 的<code>this.#revolve</code></li> <li>由于 p 没有后续的 then 链，所以无后续回调函数需要执行，p 内部状态变为<code>fulfilled</code>, 终值为 <code>user</code>的终值</li>",xs,H,ll="Note",_s,w,al="对于实际的 Promise 来说，返回值不仅可以是 Promise 对象，还可以是更广泛意义上的 Thenable Object，即任何带有<code>then</code>方法的对象",Ps,as,dl=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> isThenable</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#89DDFF"> typeof</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF">?.</span><span style="color:#BABED8">then</span><span style="color:#89DDFF"> ===</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">function</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,ns,M,nl="异常的集中处理",bs,L,pl="Promise 相比之前的一大优势，就是不再需要对每一步异步操作添加异常处理。只需要在 then 链的末尾添加就可以集中处理整个链上的异常",Ts,R,ol="另外，由于在内部 Promise 会调用外部的函数，所以在使用的过程中应该进行一些保护，如异常处理。同时对于<code>resolve</code>和<code>reject</code>，最多只允许其中之一执行一次",js,ps,hl=`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">class</span><span style="color:#FFCB6B"> MyPromise</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">  constructor</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#state</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> '</span><span style="color:#C3E88D">pending</span><span style="color:#89DDFF">'</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#value</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> null</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#BABED8">#handlers</span><span style="color:#89DDFF"> =</span><span style="color:#F07178"> []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">    // mark</span></span>
<span class="line"><span style="color:#89DDFF">    this.</span><span style="color:#82AAFF">#safeRun</span><span style="color:#F07178">(</span><span style="color:#BABED8">fn</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#resolve</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#reject</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #safeRun</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> onFulfilled</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> onRejected</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">    let</span><span style="color:#BABED8"> done</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    try</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#F07178">      fn(</span></span>
<span class="line"><span style="color:#89DDFF">        (</span><span style="color:#BABED8;font-style:italic">val</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">          if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">            return</span></span>
<span class="line"><span style="color:#89DDFF">          }</span></span>
<span class="line"><span style="color:#BABED8">          done</span><span style="color:#89DDFF"> =</span><span style="color:#FF9CAC"> true</span></span>
<span class="line"><span style="color:#F07178">          onFulfilled(</span><span style="color:#BABED8">val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">        },</span></span>
<span class="line"><span style="color:#89DDFF">        (</span><span style="color:#BABED8;font-style:italic">val</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">          if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">            return</span></span>
<span class="line"><span style="color:#89DDFF">          }</span></span>
<span class="line"><span style="color:#BABED8">          done</span><span style="color:#89DDFF"> =</span><span style="color:#FF9CAC"> true</span></span>
<span class="line"><span style="color:#F07178">          onRejected(</span><span style="color:#BABED8">val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">        }</span></span>
<span class="line"><span style="color:#F07178">      )</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#89DDFF;font-style:italic"> catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">err</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">      if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">        return</span></span>
<span class="line"><span style="color:#89DDFF">      }</span></span>
<span class="line"><span style="color:#BABED8">      done</span><span style="color:#89DDFF"> =</span><span style="color:#FF9CAC"> true</span></span>
<span class="line"><span style="color:#F07178">      onRejected(</span><span style="color:#BABED8">err</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">  #resolve</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#C792EA"> =></span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    if</span><span style="color:#F07178"> (isThenable(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">      // mark</span></span>
<span class="line"><span style="color:#89DDFF">      this.</span><span style="color:#F07178">#safeRun(</span><span style="color:#BABED8">value</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">then</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#resolve</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> this.</span><span style="color:#BABED8">#reject</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#89DDFF;font-style:italic"> else</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF">      this.</span><span style="color:#F07178">#fulfill(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`,os,g,el="总结",Hs,O,tl='到此，我们实现一个 Promise 所需的核心功能，完整代码请参见<a href="https://gist.github.com/yshwaker/aea34aa9b44ca20187010e3b4ecf9b0b" rel="nofollow">gist</a>。',ws,z,cl="推荐阅读",Ms,Q,rl='<li><a href="https://www.promisejs.org/implementing/" rel="nofollow">Promises</a></li> <li><a href="https://exploringjs.com/deep-js/ch_implementing-promises.html" rel="nofollow">Exploring Promises by implementing them</a></li>';return{c(){D=c("p"),D.textContent=Rs,es=o(),y=c("h2"),y.textContent=gs,ts=o(),i=c("p"),i.textContent=Os,cs=o(),B=c("h2"),B.textContent=zs,rs=o(),E=c("p"),E.textContent=Qs,Fs=o(),A=c("p"),A.textContent=qs,Ds=o(),q=new F(!1),I=o(),f=c("p"),f.textContent=Is,ys=o(),N=new F(!1),S=o(),u=c("h2"),u.innerHTML=Ns,is=o(),d=c("p"),d.innerHTML=Ss,Bs=o(),h=c("p"),h.innerHTML=Ys,Es=o(),Y=new F(!1),$=o(),m=c("p"),m.textContent=$s,As=o(),U=new F(!1),V=o(),C=c("p"),C.innerHTML=Us,fs=o(),v=c("p"),v.textContent=Vs,us=o(),Z=new F(!1),G=o(),k=c("h3"),k.innerHTML=Zs,ds=o(),x=c("p"),x.innerHTML=Gs,hs=o(),J=new F(!1),K=o(),_=c("h3"),_.innerHTML=Js,ms=o(),P=c("p"),P.textContent=Ks,Cs=o(),W=new F(!1),X=o(),b=c("p"),b.innerHTML=Ws,vs=o(),ss=new F(!1),ls=o(),T=c("p"),T.innerHTML=Xs,ks=o(),j=c("ol"),j.innerHTML=sl,xs=o(),H=c("h4"),H.textContent=ll,_s=o(),w=c("p"),w.innerHTML=al,Ps=o(),as=new F(!1),ns=o(),M=c("h3"),M.textContent=nl,bs=o(),L=c("p"),L.textContent=pl,Ts=o(),R=c("p"),R.innerHTML=ol,js=o(),ps=new F(!1),os=o(),g=c("h3"),g.textContent=el,Hs=o(),O=c("p"),O.innerHTML=tl,ws=o(),z=c("h3"),z.textContent=cl,Ms=o(),Q=c("ul"),Q.innerHTML=rl,this.h()},l(s){D=e(s,"P",{"data-svelte-h":!0}),t(D)!=="svelte-h3vlnz"&&(D.textContent=Rs),es=p(s),y=e(s,"H2",{"data-svelte-h":!0}),t(y)!=="svelte-31ld0y"&&(y.textContent=gs),ts=p(s),i=e(s,"P",{"data-svelte-h":!0}),t(i)!=="svelte-1dto5ck"&&(i.textContent=Os),cs=p(s),B=e(s,"H2",{"data-svelte-h":!0}),t(B)!=="svelte-a9rsyl"&&(B.textContent=zs),rs=p(s),E=e(s,"P",{"data-svelte-h":!0}),t(E)!=="svelte-1oxcamp"&&(E.textContent=Qs),Fs=p(s),A=e(s,"P",{"data-svelte-h":!0}),t(A)!=="svelte-1b3xvpa"&&(A.textContent=qs),Ds=p(s),q=r(s,!1),I=p(s),f=e(s,"P",{"data-svelte-h":!0}),t(f)!=="svelte-5wxr15"&&(f.textContent=Is),ys=p(s),N=r(s,!1),S=p(s),u=e(s,"H2",{"data-svelte-h":!0}),t(u)!=="svelte-ljuwsl"&&(u.innerHTML=Ns),is=p(s),d=e(s,"P",{"data-svelte-h":!0}),t(d)!=="svelte-112nglp"&&(d.innerHTML=Ss),Bs=p(s),h=e(s,"P",{"data-svelte-h":!0}),t(h)!=="svelte-1vlfnz8"&&(h.innerHTML=Ys),Es=p(s),Y=r(s,!1),$=p(s),m=e(s,"P",{"data-svelte-h":!0}),t(m)!=="svelte-749p91"&&(m.textContent=$s),As=p(s),U=r(s,!1),V=p(s),C=e(s,"P",{"data-svelte-h":!0}),t(C)!=="svelte-17j7g5s"&&(C.innerHTML=Us),fs=p(s),v=e(s,"P",{"data-svelte-h":!0}),t(v)!=="svelte-dbo6he"&&(v.textContent=Vs),us=p(s),Z=r(s,!1),G=p(s),k=e(s,"H3",{"data-svelte-h":!0}),t(k)!=="svelte-lcaddu"&&(k.innerHTML=Zs),ds=p(s),x=e(s,"P",{"data-svelte-h":!0}),t(x)!=="svelte-1car7sk"&&(x.innerHTML=Gs),hs=p(s),J=r(s,!1),K=p(s),_=e(s,"H3",{"data-svelte-h":!0}),t(_)!=="svelte-z93gxs"&&(_.innerHTML=Js),ms=p(s),P=e(s,"P",{"data-svelte-h":!0}),t(P)!=="svelte-18d93yu"&&(P.textContent=Ks),Cs=p(s),W=r(s,!1),X=p(s),b=e(s,"P",{"data-svelte-h":!0}),t(b)!=="svelte-qa22ip"&&(b.innerHTML=Ws),vs=p(s),ss=r(s,!1),ls=p(s),T=e(s,"P",{"data-svelte-h":!0}),t(T)!=="svelte-1fohu5d"&&(T.innerHTML=Xs),ks=p(s),j=e(s,"OL",{"data-svelte-h":!0}),t(j)!=="svelte-1k3ppl4"&&(j.innerHTML=sl),xs=p(s),H=e(s,"H4",{"data-svelte-h":!0}),t(H)!=="svelte-aggf5e"&&(H.textContent=ll),_s=p(s),w=e(s,"P",{"data-svelte-h":!0}),t(w)!=="svelte-15p7fat"&&(w.innerHTML=al),Ps=p(s),as=r(s,!1),ns=p(s),M=e(s,"H3",{"data-svelte-h":!0}),t(M)!=="svelte-1mkb4ol"&&(M.textContent=nl),bs=p(s),L=e(s,"P",{"data-svelte-h":!0}),t(L)!=="svelte-1wch15e"&&(L.textContent=pl),Ts=p(s),R=e(s,"P",{"data-svelte-h":!0}),t(R)!=="svelte-12pa04f"&&(R.innerHTML=ol),js=p(s),ps=r(s,!1),os=p(s),g=e(s,"H3",{"data-svelte-h":!0}),t(g)!=="svelte-xzg5rm"&&(g.textContent=el),Hs=p(s),O=e(s,"P",{"data-svelte-h":!0}),t(O)!=="svelte-dfxw64"&&(O.innerHTML=tl),ws=p(s),z=e(s,"H3",{"data-svelte-h":!0}),t(z)!=="svelte-1of9858"&&(z.textContent=cl),Ms=p(s),Q=e(s,"UL",{"data-svelte-h":!0}),t(Q)!=="svelte-1l6jalr"&&(Q.innerHTML=rl),this.h()},h(){q.a=I,N.a=S,Y.a=$,U.a=V,Z.a=G,J.a=K,W.a=X,ss.a=ls,as.a=ns,ps.a=os},m(s,l){n(s,D,l),n(s,es,l),n(s,y,l),n(s,ts,l),n(s,i,l),n(s,cs,l),n(s,B,l),n(s,rs,l),n(s,E,l),n(s,Fs,l),n(s,A,l),n(s,Ds,l),q.m(Dl,s,l),n(s,I,l),n(s,f,l),n(s,ys,l),N.m(yl,s,l),n(s,S,l),n(s,u,l),n(s,is,l),n(s,d,l),n(s,Bs,l),n(s,h,l),n(s,Es,l),Y.m(il,s,l),n(s,$,l),n(s,m,l),n(s,As,l),U.m(Bl,s,l),n(s,V,l),n(s,C,l),n(s,fs,l),n(s,v,l),n(s,us,l),Z.m(El,s,l),n(s,G,l),n(s,k,l),n(s,ds,l),n(s,x,l),n(s,hs,l),J.m(Al,s,l),n(s,K,l),n(s,_,l),n(s,ms,l),n(s,P,l),n(s,Cs,l),W.m(fl,s,l),n(s,X,l),n(s,b,l),n(s,vs,l),ss.m(ul,s,l),n(s,ls,l),n(s,T,l),n(s,ks,l),n(s,j,l),n(s,xs,l),n(s,H,l),n(s,_s,l),n(s,w,l),n(s,Ps,l),as.m(dl,s,l),n(s,ns,l),n(s,M,l),n(s,bs,l),n(s,L,l),n(s,Ts,l),n(s,R,l),n(s,js,l),ps.m(hl,s,l),n(s,os,l),n(s,g,l),n(s,Hs,l),n(s,O,l),n(s,ws,l),n(s,z,l),n(s,Ms,l),n(s,Q,l)},p:Ls,i:Ls,o:Ls,d(s){s&&(a(D),a(es),a(y),a(ts),a(i),a(cs),a(B),a(rs),a(E),a(Fs),a(A),a(Ds),q.d(),a(I),a(f),a(ys),N.d(),a(S),a(u),a(is),a(d),a(Bs),a(h),a(Es),Y.d(),a($),a(m),a(As),U.d(),a(V),a(C),a(fs),a(v),a(us),Z.d(),a(G),a(k),a(ds),a(x),a(hs),J.d(),a(K),a(_),a(ms),a(P),a(Cs),W.d(),a(X),a(b),a(vs),ss.d(),a(ls),a(T),a(ks),a(j),a(xs),a(H),a(_s),a(w),a(Ps),as.d(),a(ns),a(M),a(bs),a(L),a(Ts),a(R),a(js),ps.d(),a(os),a(g),a(Hs),a(O),a(ws),a(z),a(Ms),a(Q))}}}const xl={title:"从 0 实现一个 Promise",date:"2022-07-29",summary:"Learn to implement a Promise from scratch",updatedOn:"2025-08-16T15:41:37.974Z"},{title:bl,date:Tl,summary:jl,updatedOn:Hl}=xl;class wl extends Cl{constructor(D){super(),vl(this,D,null,kl,ml,{})}}export{wl as default,xl as metadata};
