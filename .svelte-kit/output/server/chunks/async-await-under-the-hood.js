import { c as create_ssr_component } from "./ssr.js";
const metadata = {
  "title": "async/await 是如何实现的？",
  "date": "2022-07-17",
  "summary": "ES2017 引入了`Async/Await`语法，使得我们的异步代码看起来更像是同步代码，隐藏了成堆的回调函数。但是 Javascript 引擎内部是如何实现的呢？",
  "updatedOn": "2025-08-16T15:41:37.970Z"
};
const { title, date, summary, updatedOn } = metadata;
const Async_await_under_the_hood = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p data-svelte-h="svelte-1pzdxqk">ES2017 引入了<code>Async/Await</code>语法，使得我们的异步代码看起来更像是同步代码，隐藏了成堆的回调函数。但是 Javascript 引擎内部是如何实现的呢？</p> <h2 data-svelte-h="svelte-iv4go9">先来看看 Babel 的实现</h2> <p data-svelte-h="svelte-1js1eq2">在前几年浏览器还没有完全原生支持<code>async</code>语法时，为了抢先体验 ECMA Spec 中的新功能，我们一般使用 Babel 将最新语法转译<code>Transpile</code>成浏览器支持的语法结构</p> <p data-svelte-h="svelte-iplkh4">如：</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">async</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">url</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  try</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">    const</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF;font-style:italic"> await</span><span style="color:#82AAFF"> fetch</span><span style="color:#F07178">(</span><span style="color:#BABED8">url</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#BABED8">    console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF;font-style:italic">await</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">text</span><span style="color:#F07178">())</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">err</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">    console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">fetch failed</span><span style="color:#89DDFF">'</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">  }</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-1v7b1bz">转译成了</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> asyncGeneratorStep</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">gen</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> _next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> _throw</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> key</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> arg</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#89DDFF;font-style:italic"> try</span><span style="color:#89DDFF"> {</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> gen</span><span style="color:#F07178">[</span><span style="color:#BABED8">key</span><span style="color:#F07178">](</span><span style="color:#BABED8">arg</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">value</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF;font-style:italic"> catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">error</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span><span style="color:#82AAFF"> reject</span><span style="color:#F07178">(</span><span style="color:#BABED8">error</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF;font-style:italic"> return</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF;font-style:italic"> if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span><span style="color:#82AAFF"> resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF;font-style:italic"> else</span><span style="color:#89DDFF"> {</span><span style="color:#FFCB6B"> Promise</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#F07178">(</span><span style="color:#BABED8">_next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _throw</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#89DDFF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> _asyncToGenerator</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#89DDFF;font-style:italic"> return</span><span style="color:#C792EA"> function</span><span style="color:#89DDFF"> ()</span><span style="color:#89DDFF"> {</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> self</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF"> this,</span><span style="color:#BABED8"> args</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> arguments</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF;font-style:italic"> return</span><span style="color:#89DDFF"> new</span><span style="color:#FFCB6B"> Promise</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> reject</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#C792EA"> var</span><span style="color:#BABED8"> gen</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> fn</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#BABED8">self</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> args</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> _next</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">value</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#82AAFF"> asyncGeneratorStep</span><span style="color:#F07178">(</span><span style="color:#BABED8">gen</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> reject</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _throw</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">next</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> _throw</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span><span style="color:#82AAFF"> asyncGeneratorStep</span><span style="color:#F07178">(</span><span style="color:#BABED8">gen</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> resolve</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> reject</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _next</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> _throw</span><span style="color:#89DDFF">,</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">throw</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#82AAFF"> _next</span><span style="color:#F07178">(</span><span style="color:#89DDFF">undefined</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> };</span><span style="color:#89DDFF"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">_x</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> _foo</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this,</span><span style="color:#BABED8"> arguments</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> _foo</span><span style="color:#89DDFF">()</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">  _foo</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> _asyncToGenerator</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF">*</span><span style="color:#82AAFF"> g_foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">url</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    try</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">      const</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF;font-style:italic"> yield</span><span style="color:#82AAFF"> fetch</span><span style="color:#F07178">(</span><span style="color:#BABED8">url</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#BABED8">      console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF;font-style:italic">yield</span><span style="color:#BABED8"> response</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">text</span><span style="color:#F07178">())</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#89DDFF;font-style:italic"> catch</span><span style="color:#F07178"> (</span><span style="color:#BABED8">err</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">      console</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">log</span><span style="color:#F07178">(</span><span style="color:#89DDFF">'</span><span style="color:#C3E88D">fetch failed</span><span style="color:#89DDFF">'</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">    }</span></span>
<span class="line"><span style="color:#89DDFF">  }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> _foo</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this,</span><span style="color:#BABED8"> arguments</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-1xhnxoj">Babel 替我们生成了两个 helper 函数，如果我们对它稍加简化，可以得到：</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">function</span><span style="color:#82AAFF"> _asyncToGenerator</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">fn</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#C792EA"> function</span><span style="color:#89DDFF"> ()</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">    var</span><span style="color:#BABED8"> gen</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> fn</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">apply</span><span style="color:#F07178">(</span><span style="color:#89DDFF">this,</span><span style="color:#BABED8"> arguments</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    return</span><span style="color:#89DDFF"> new</span><span style="color:#FFCB6B"> Promise</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF"> (</span><span style="color:#BABED8;font-style:italic">resolve</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">      function</span><span style="color:#82AAFF"> step</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">key</span><span style="color:#89DDFF">,</span><span style="color:#BABED8;font-style:italic"> arg</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">        var</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> gen</span><span style="color:#F07178">[</span><span style="color:#BABED8">key</span><span style="color:#F07178">](</span><span style="color:#BABED8">arg</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#C792EA">        var</span><span style="color:#BABED8"> value</span><span style="color:#89DDFF"> =</span><span style="color:#BABED8"> info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">value</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">       if</span><span style="color:#F07178"> (</span><span style="color:#BABED8">info</span><span style="color:#89DDFF">.</span><span style="color:#BABED8">done</span><span style="color:#F07178">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#82AAFF">          resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">        }</span><span style="color:#89DDFF;font-style:italic"> else</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">          // 如果value不是一个promise，则将它转化成一个resolved promise</span></span>
<span class="line"><span style="color:#FFCB6B">          Promise</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">resolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">value</span><span style="color:#F07178">)</span><span style="color:#89DDFF">.</span><span style="color:#82AAFF">then</span><span style="color:#F07178">(</span><span style="color:#C792EA">function</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">val</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#82AAFF">            step</span><span style="color:#F07178">(</span><span style="color:#89DDFF">"</span><span style="color:#C3E88D">next</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> val</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">          },</span><span style="color:#C792EA"> function</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">err</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#82AAFF">            step</span><span style="color:#F07178">(</span><span style="color:#89DDFF">"</span><span style="color:#C3E88D">throw</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">          }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">        }</span></span>
<span class="line"><span style="color:#89DDFF">      }</span></span>
<span class="line"><span style="color:#82AAFF">      step</span><span style="color:#F07178">(</span><span style="color:#89DDFF">"</span><span style="color:#C3E88D">next</span><span style="color:#89DDFF">"</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">    }</span><span style="color:#F07178">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">  };</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <h3 data-svelte-h="svelte-1v7o2e2">生成器 Generator</h3> <p data-svelte-h="svelte-1o07asw">在这里例子中异步函数被转换成了生成器函数。这里先简要回顾一下生成器：</p> <ul data-svelte-h="svelte-3x9whi"><li>通过<code>function* () {}</code>定义生成器函数，其返回一个生成器对象</li> <li>调用生成器函数的<code>.next()</code>方法后，开始执行生成器函数代码</li> <li>生成器对象中可使用<code>yield</code>关键字，生成器函数执行时遇到<code>yield</code>将暂停函数的执行，转而执行<code>.next()</code>之后的代码</li> <li>再次调用<code>.next()</code>方法时，从之前<code>yield</code>的位置继续执行</li></ul> <p data-svelte-h="svelte-ve19xp">生成器函数与主函数之间可进行数据传递：</p> <ul data-svelte-h="svelte-wwpj3m"><li>主函数 -&gt; 生成器函数：<code>gen.next(val)</code> 参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator/next#%E5%90%91%E7%94%9F%E6%88%90%E5%99%A8%E4%BC%A0%E5%80%BC" rel="nofollow">🔗</a></li> <li>生成器函数 -&gt; 主函数：<code>yield val</code></li></ul> <h3 data-svelte-h="svelte-1yulp3t"><code>_asyncToGenerator </code>在干什么？</h3> <p data-svelte-h="svelte-i2knj2">我们知道在<code>async</code>函数<code>await</code>一个 promise 对象，我们会等到它 fulfilled 以后开始执行后面的代码。在转换后的生成器函数中，<code>yield</code>相当于<code>await</code>。然后我们调用<code>gen.next()</code>方法执行生成器函数，取得<code>yield fetch(url)</code>中的 promise，并<code>.then()</code>方法中进行递归——调用<code>gen.next(arg)</code>继续执行生成器函数，promise resolve 的值通过<code>arg</code>传递给生成器函数, …</p> <p data-svelte-h="svelte-1fjw9rp">具体步骤为：</p> <ol data-svelte-h="svelte-vznels"><li><p>创建生成器对象<code>gen</code>，async 函数返回一个 promise</p></li> <li><p>执行传入 promise 的函数，调用<code>gen.next()</code>，引擎跳转到生成器函数<code>g_foo</code>开始执行</p></li> <li><p>遇到<code>yield</code>,暂停函数执行，<code>fetch(url)</code>返回一个 promise，并被传回给主函数，赋值给<code>info.value</code></p></li> <li><p>调用<code>promise.then</code>设置 resolved 后的回调函数，<code>_asyncToGenerator</code>结束运行</p></li> <li><p>此时将继续执行主函数中的剩余代码。</p></li> <li><p>当 fetch 从服务器得到数据后，执行回调函数，即<code>step</code>，并将promise resolved后的值传入其中</p></li> <li><p>重复执行2～6，知道生成器函数返回，<code>done</code>为真</p></li></ol> <h2 data-svelte-h="svelte-s67dv6">浏览器（V8）实际是如何处理的？</h2> <p data-svelte-h="svelte-12kzb59">根据 V8 官方的 <a href="https://v8.dev/blog/fast-async#async-functions" rel="nofollow">blog</a>，在 Node.js 12 的一系列优化后，<code>async</code>函数在内部被转化成了</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">async</span><span style="color:#C792EA"> function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">v</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#C792EA">  const</span><span style="color:#BABED8"> w</span><span style="color:#89DDFF"> =</span><span style="color:#89DDFF;font-style:italic"> await</span><span style="color:#BABED8"> v</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">  return</span><span style="color:#BABED8"> w</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8">resumable </span><span style="color:#C792EA">function</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF">(</span><span style="color:#BABED8;font-style:italic">v</span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">  implicit_promise</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> createPromise</span><span style="color:#F07178">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 如果v不是promise，则将其转化成promise</span></span>
<span class="line"><span style="color:#BABED8">  promise</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> promiseResolve</span><span style="color:#F07178">(</span><span style="color:#BABED8">v</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 设置fulfilled和rejected时的回调函数，恢复foo的运行</span></span>
<span class="line"><span style="color:#82AAFF">  performPromiseThen</span><span style="color:#F07178">(</span><span style="color:#BABED8">promise</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic">    res</span><span style="color:#C792EA"> =></span><span style="color:#82AAFF"> resume</span><span style="color:#F07178">(</span><span style="color:#89DDFF">&#x3C;&#x3C;</span><span style="color:#BABED8">foo</span><span style="color:#89DDFF">>>,</span><span style="color:#BABED8"> res</span><span style="color:#F07178">)</span><span style="color:#89DDFF">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic">    err</span><span style="color:#C792EA"> =></span><span style="color:#82AAFF"> throw</span><span style="color:#F07178">(</span><span style="color:#89DDFF">&#x3C;&#x3C;</span><span style="color:#BABED8">foo</span><span style="color:#89DDFF">>>,</span><span style="color:#BABED8"> err</span><span style="color:#F07178">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic">  // 挂起foo，并返回隐式创建的promise</span></span>
<span class="line"><span style="color:#BABED8">  w</span><span style="color:#89DDFF"> =</span><span style="color:#82AAFF"> suspend</span><span style="color:#F07178">(</span><span style="color:#89DDFF">&#x3C;&#x3C;</span><span style="color:#BABED8">foo</span><span style="color:#89DDFF">>>,</span><span style="color:#BABED8"> implicit_promise</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#82AAFF">  resolvePromise</span><span style="color:#F07178">(</span><span style="color:#BABED8">implicit_promise</span><span style="color:#89DDFF">,</span><span style="color:#BABED8"> w</span><span style="color:#F07178">)</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-ntlq3a">观察发现代码结构其实与 Babel polyfill 十分相似，内部同样使用Promise，<code>resume</code>和<code>suspend</code>这些引擎内部函数与 generator 也有异曲同工之妙。<code>performPromiseThen</code>在引擎的微任务队列中创建了<a href="https://tc39.es/ecma262/#sec-promisereactionjob" rel="nofollow">PromiseReactionJob</a>,与回调函数绑定。当主函数运行完，且await的promise resolve了之后，执行微任务，恢复foo函数的执行。</p>`;
});
export {
  Async_await_under_the_hood as default,
  metadata
};
