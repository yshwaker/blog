import { c as create_ssr_component, f as add_attribute } from "./ssr.js";
const metadata = {
  "title": "网站无障碍化",
  "date": "2023-05-26",
  "summary": "有关 a11y 的若干技巧",
  "updatedOn": "2025-08-16T15:41:37.968Z"
};
const { title, date, summary, updatedOn } = metadata;
const A11y_note = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p data-svelte-h="svelte-jqz5g2">我国的网民规模已经将近11亿，其中不乏一些特殊人群，他们和我们一样享有能够正常、愉悦地享受网络带来的勉励的权利。况且越来越多的生活服务被搬到了网上，如今离开了互联网几乎寸步难行。因此网站的无障碍化显得更加重要了。前段时间学习了 Josh W Comeau 的<a href="https://css-for-js.dev/" rel="nofollow">课程</a>，其中他对网站的无障碍化费了不少笔墨，学习后感觉获益颇丰。尽管在公司的项目中，无障碍化的设计可能已经被封装在基础化的组件中或者被设计团队所充分考虑，但我觉得对于程序员来说仍然是一种不可或缺的知识，尤其是开发自己的独立项目时。</p> <h2 data-svelte-h="svelte-c1osyv">特殊人群</h2> <p data-svelte-h="svelte-1sph9o5">在网页设计时，时常从特殊人群的使用角度出发去思考问题，更有利于网站的无障碍化设计。让我们设想一下特殊人群使用网页的情景：</p> <ul data-svelte-h="svelte-16l5pn"><li>行动障碍人群可能需要键盘不断点击 Tab 键来选择网页中的可交互元素。</li> <li>视力严重障碍的人需要使用读屏软件来播放网页中各个元素和其中的内容。常见的读屏软件如：苹果系统中自带的 VoiceOver，Windows 系统中的 Narrator，安卓系统中 Talkback。</li> <li>色弱、色盲人群：可能对红绿、黄蓝以及一些对比度低的色彩组合失去分辨能力。</li> <li>老龄化人群：通常以更大的默认字体浏览网页，或频繁使用放大缩小功能。</li> <li>前庭运动障碍患者：这部分人群可能会开启系统的“减少动态功能”以避免过多带有动态的动画带来的不良反应。</li></ul> <p data-svelte-h="svelte-1q9g3w5">针对这些使用场景，我们应当确保他们在使用系统的辅助功能时能够得到正确的结果和良好的体验。</p> <h2 data-svelte-h="svelte-on4qi2">读屏模式的正确性</h2> <h3 data-svelte-h="svelte-1j1fz19">伪元素</h3> <p data-svelte-h="svelte-16ho6ty">当我们在使用<code>::before</code>或<code>::after</code>等伪元素时，不应当在其中添加除了装饰性元素以外的文字内容。这是因为不同浏览器在通过读屏软件阅读这些元素的处理上存在不一致。一些浏览器会读出其中的文字内容，一些则不会。使用<code>&lt;span&gt;</code>来配合 CSS 添加文字内容也可以达到一样的效果。</p> <h3 data-svelte-h="svelte-aj52fa">常用组件</h3> <p data-svelte-h="svelte-80xemd">当创建自己的progress bar，breadcrumb等常用UI组件时，尽量遵循规范，添加适当的<code>aria-label</code>。可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles" rel="nofollow">WAI-ARIA Roles - Accessibility | MDN</a>。WAI 文档中也提供了常见类型的指南，如<a href="https://www.w3.org/WAI/ARIA/apg/patterns/breadcrumb/" rel="nofollow">Breadcrumb Pattern | APG | WAI | W3C</a>。</p> <p data-svelte-h="svelte-luln1k">在选择第三方UI组件库时，优先选择无障碍支持较好的组件，如<a href="https://www.radix-ui.com/" rel="nofollow">Radix</a>。</p> <h3 data-svelte-h="svelte-242nln">视觉上隐藏元素</h3> <p data-svelte-h="svelte-1gionnw">在网页设计中，一些常见的元素如 Icon 对于普通用户来说具有不错的辨识度，但无法被读屏软件读出。我们可以选择在 Icon 旁添加相应的说明文字。如果不希望改动 UI 设计，那么可以选择添加<code>aria-label</code>属性。但是要注意的是，在<strong>非</strong>可交互元素上添加<code>aria-label</code>会被自动忽略。那么这个时候，可以选择使用 CSS 来隐藏文字同时保证其可被读屏软件读出。</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#89DDFF">.</span><span style="color:#FFCB6B">visually-hidden</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#B2CCD6">  position</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> absolute</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  overflow</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> hidden</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  clip</span><span style="color:#89DDFF">:</span><span style="color:#82AAFF"> rect</span><span style="color:#89DDFF">(</span><span style="color:#F78C6C">0</span><span style="color:#F78C6C"> 0</span><span style="color:#F78C6C"> 0</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">);</span></span>
<span class="line"><span style="color:#B2CCD6">  height</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> 1px</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  width</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> 1px</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  margin</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> -1px</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  padding</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  border</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-ug4sx">我们没有使用<code>display:none</code>和<code>visibility:hidden</code>，因为它们会同时对读屏软件隐藏元素。</p> <h2 data-svelte-h="svelte-4he0ux">适老化</h2> <h3 data-svelte-h="svelte-260u1r">文字的大小和排布</h3> <p data-svelte-h="svelte-1f9dv8n">字体的大小不应小于 16px。根据 <a href="https://www.w3.org/WAI/WCAG21/Understanding/text-spacing.html" rel="nofollow">WCAG</a>的规范，行高至少需要 1.5。而中文没有英文那样较大的上伸部（ascender）和下延部（descender）空白区域，所以个人认为可以行高可以更大一些。</p> <img src="/blog-images/a11y-text.png"${add_attribute("width", 402, 0)}${add_attribute("height", 85, 0)} alt="中英文字体上下空白区域对比" style="margin: 0 auto; display: block;"> <h4 data-svelte-h="svelte-wjygog">响应式设计中断点的单位</h4> <p data-svelte-h="svelte-1fuhwz3">通常我们在<code>@media</code>规则中使用如<code>500px</code>，<code>1100px</code>，<code>1500px</code>等断点来区分手机、平台、PC等不同使用场景。但是当我们预期用户会修改浏览器的默认字体大小时，这样的断点设置方式是否合理呢？</p> <img src="/blog-images/default-font-size-setting.png"${add_attribute("width", 1592 / 2, 0)}${add_attribute("height", 304 / 2, 0)} alt="默认字体大小设置" style="margin: 0 auto; display: block;"> <p data-svelte-h="svelte-mzlpex">在浏览器默认设置下文本的字体是 16px，相对于 1600px 的显示器来说，是 100 倍的比例。但是当用户选择了更大的字体设置时（比如增大一倍），其相对比例就变成了 50倍。从文字和屏幕比例关系来说，相当于用户处在一个800px的显示设备上。那么此时如果仍然保持原有布局，一定会显得比较拥挤。更合适的做法应该是使用<code>500px ~ 1100px</code>所对应的手机端布局。</p> <p data-svelte-h="svelte-1jvmeq0">因此我们发现断点的设置实际上和文字的字体大小有关，在选取单位时，使用相对于根元素字体大小的<code>rem</code>单位就更合适了。可以将<code>@media</code>改为：</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic">@media</span><span style="color:#89DDFF"> (</span><span style="color:#FFCB6B">min-width</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> calc(</span><span style="color:#F78C6C">500</span><span style="color:#89DDFF"> /</span><span style="color:#F78C6C"> 16</span><span style="color:#BABED8"> * </span><span style="color:#F78C6C">1rem</span><span style="color:#89DDFF">)</span><span style="color:#BABED8">) </span><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#BABED8">  ...</span></span>
<span class="line"><span style="color:#BABED8">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <h4 data-svelte-h="svelte-krlf1h">触摸屏可点击区域</h4> <p data-svelte-h="svelte-fdthrh">根据苹果的<a href="https://developer.apple.com/design/human-interface-guidelines/accessibility#Buttons-and-controls" rel="nofollow">人机交互指南</a>中的建议，移动端可交互元素的点击有效区域应不小于 44 x 44px。对于手指不太灵活的老年人和行动不便人士来说，这是非常必要的。每当看到身边的老年人费力地戳着屏幕，都会觉得我们这些从业人员的责任重大。</p> <p data-svelte-h="svelte-1ww5kge">但是我们仍然希望网页的实现与设计能保持一致，在满足点击有效区域的同时，保持原有元素大小。<code>::after</code>可以帮助我们达到这一点。</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#FFCB6B">button</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#B2CCD6">  position</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> relative</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  height</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> 36px</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B">button</span><span style="color:#89DDFF">::</span><span style="color:#C792EA">after</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#B2CCD6">  content</span><span style="color:#89DDFF">:</span><span style="color:#89DDFF"> ''</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  position</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> absolute</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  inset</span><span style="color:#89DDFF">:</span><span style="color:#F78C6C"> -8px</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <img src="/blog-images/a11y-clickable-area.png"${add_attribute("width", 414 / 2, 0)}${add_attribute("height", 434 / 2, 0)} alt="可点击预期演示" style="margin: 0 auto; display: block;"> <p data-svelte-h="svelte-tjv284">我们将伪元素设置为绝对定位，并向外延伸一定距离，撑大按钮的实际大小。但是绝对定位的伪元素不在文档流中，因此按钮本体可以保持原有大小，做到了既要又要。</p> <p data-svelte-h="svelte-6g4zvh">如果你的可交互元素是动态的，也可以动态计算绝对定位的取值，如</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#FFCB6B">button</span><span style="color:#89DDFF">::</span><span style="color:#C792EA">after</span><span style="color:#89DDFF"> {</span></span>
<span class="line"><span style="color:#BABED8">  --inset</span><span style="color:#89DDFF">:</span><span style="color:#82AAFF"> min</span><span style="color:#89DDFF">(</span><span style="color:#F78C6C">0px</span><span style="color:#89DDFF">,</span><span style="color:#82AAFF"> calc</span><span style="color:#89DDFF">(</span><span style="color:#BABED8">(</span><span style="color:#F78C6C">100%</span><span style="color:#89DDFF"> -</span><span style="color:#F78C6C"> 44px</span><span style="color:#89DDFF">)</span><span style="color:#BABED8;font-style:italic"> /</span><span style="color:#F78C6C"> 2</span><span style="color:#89DDFF">)</span><span style="color:#BABED8">)</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  content</span><span style="color:#89DDFF">:</span><span style="color:#89DDFF"> ''</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  position</span><span style="color:#89DDFF">:</span><span style="color:#BABED8"> absolute</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#B2CCD6">  top</span><span style="color:#89DDFF">:</span><span style="color:#82AAFF"> var</span><span style="color:#89DDFF">(</span><span style="color:#BABED8">--inset</span><span style="color:#89DDFF">);</span></span>
<span class="line"><span style="color:#B2CCD6">  bottom</span><span style="color:#89DDFF">:</span><span style="color:#82AAFF"> var</span><span style="color:#89DDFF">(</span><span style="color:#BABED8">--inset</span><span style="color:#89DDFF">);</span></span>
<span class="line"><span style="color:#B2CCD6">  left</span><span style="color:#89DDFF">:</span><span style="color:#82AAFF"> var</span><span style="color:#89DDFF">(</span><span style="color:#BABED8">--inset</span><span style="color:#89DDFF">);</span></span>
<span class="line"><span style="color:#B2CCD6">  right</span><span style="color:#89DDFF">:</span><span style="color:#82AAFF"> var</span><span style="color:#89DDFF">(</span><span style="color:#BABED8">--inset</span><span style="color:#89DDFF">);</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <h3 data-svelte-h="svelte-1v04pvh">对比度</h3> <p data-svelte-h="svelte-12xlpcz">WCGA 对文字和背景的最低对比度做了规定：</p> <table data-svelte-h="svelte-1t8r1ly"><thead><tr><th></th> <th>普通文本</th> <th>大字号文本</th></tr></thead> <tbody><tr><td>AA</td> <td>4.5</td> <td>3</td></tr> <tr><td>AAA</td> <td>7</td> <td>4.5</td></tr></tbody></table> <p data-svelte-h="svelte-1sjgrdw">AAA 标准相对 AA 更高，我们应至少达到 AA 标准。
在 Chrome中，当我们检查特定文本元素，可以看到浏览器为我们计算出的对比度</p> <img src="/blog-images/a11y-contrast.png"${add_attribute("width", 670 / 2, 0)}${add_attribute("height", 484 / 2, 0)} alt="对比度调试" style="margin: 0 auto; display: block;"> <p data-svelte-h="svelte-1ti1pl2">不过实际使用过程中，我发现有的时候浏览器没有给出这一项数值。这个时候可以使用第三方服务，如 <a href="https://color.review/" rel="nofollow">Color.review</a> 和 <a href="https://webaim.org/resources/contrastchecker/" rel="nofollow">WebAIM: Contrast Checker</a>。在 Color.review 中选择颜色并检查它是否符合 AA 或 AAA 标准很方便。</p> <h4 data-svelte-h="svelte-13k2bvl">Placeholder</h4> <p data-svelte-h="svelte-1fafos1">输入框内的 Placeholder 默认的对比度一般较低，因此需避免在其中添加重要信息。可以做一个测试：当去掉所有 Placeholder 后，检查是否仍然能够正确识别信息和操作。</p> <h2 data-svelte-h="svelte-10yn2yo">颜色</h2> <p data-svelte-h="svelte-1g30f1s">由于每个人的颜色的辨别能力有限，因此我们在做 UI 设计时，不应当只通过颜色来传达信息。颜色应该被用来加强某种信息。比如一个红色的<code>DELETE</code>，<code>DELETE</code>文本用于传达信息，红色用于强调。</p> <p data-svelte-h="svelte-kss7gh">为了模拟色盲、色弱人群的体验，可以在Chrome的Devtools中开启响应的色彩模拟（devtool -&gt; rendering -&gt; enable vision deficiencies）。</p> <img src="/blog-images/vision-deficiencies-emulation.png"${add_attribute("width", 968 / 2, 0)}${add_attribute("height", 684 / 2, 0)} alt="模拟色盲" style="margin: 0 auto; display: block;"> <h2 data-svelte-h="svelte-ecd1fi">其他</h2> <h3 data-svelte-h="svelte-10qpt2p">不要轻易修改的样式</h3> <ul data-svelte-h="svelte-1nzc3wt"><li><code>outline</code>：不要<code>outline: none</code>来去掉元素被聚焦时的默认边框，除非更换成更明显的样式。使用键盘的用户依赖该功能导航和选中可交互元素</li></ul>`;
});
export {
  A11y_note as default,
  metadata
};
