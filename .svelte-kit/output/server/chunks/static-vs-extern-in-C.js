import { c as create_ssr_component } from "./ssr.js";
const metadata = {
  "title": "C语言中的static与extern",
  "date": "2016-03-26",
  "summary": "在学习 Operating System 时，作业需要使用 C 语言在一个 toy OS 中进行编程与学习。 在原始提供的源码中，发现有许多 static 和 extern 的关键字，故在此做一下总结与整理。",
  "updatedOn": "2025-08-16T15:41:37.976Z"
};
const { title, date, summary, updatedOn } = metadata;
const Static_vs_extern_in_C = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<p data-svelte-h="svelte-1oc8hyt">最近在学习 Operating System，作业需要使用 C 语言在一个 toy OS 中进行编程与学习。 在原始提供的源码中，发现有许多 <code>static</code> 和 <code>extern</code> 的关键字，故在此做一下总结与整理。</p> <h2 data-svelte-h="svelte-7p6yzg">extern</h2> <p data-svelte-h="svelte-ntnl3y">首先来看一下 <code>extern</code>。其最主要的作用就是可以引用工程的其他文件中定义的变量或函数。
假设有两个文件 <code>foo1.c</code> 和 <code>foo2.c</code>：</p> <p data-svelte-h="svelte-1azy6yo">foo1.c</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">int</span><span style="color:#BABED8"> var</span><span style="color:#89DDFF">;</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-1rp1czn">foo2.c</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">extern</span><span style="color:#C792EA"> int</span><span style="color:#BABED8"> var</span><span style="color:#89DDFF">;</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-18y02sb">最终生成可执行文件时，需要分别编译 compile 和链接 link：</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#FFCB6B">gcc</span><span style="color:#C3E88D"> -c</span><span style="color:#C3E88D"> foo1.c</span></span>
<span class="line"><span style="color:#FFCB6B">gcc</span><span style="color:#C3E88D"> -c</span><span style="color:#C3E88D"> foo2.c</span></span>
<span class="line"><span style="color:#FFCB6B">gcc</span><span style="color:#C3E88D"> foo1.o</span><span style="color:#C3E88D"> foo2.o</span><span style="color:#C3E88D"> -o</span><span style="color:#C3E88D"> foo</span><span style="color:#C3E88D">  //</span><span style="color:#C3E88D"> link</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-1c22xm6">在编译过程中，编译器只会为 <code>foo2.c</code> 中的 var 分配内存，在 <code>foo1.c</code> 中仅仅生成一个名为 var 的 symbol。而后在 link 过程中，链接器会将该 symbol 替换为 <code>foo2.c</code> 中的 var 的内存地址，从而达到指向同一变量的目的。</p> <p data-svelte-h="svelte-a2qgak"><code>extern</code> 的实际应用场景主要在编写库 library。打个比方，假设有名为 Mylib 的库，包含 <code>Mylib.c</code> 和 <code>Mylib.h</code>。
MyLib.c:</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">int</span><span style="color:#BABED8"> Variable</span><span style="color:#89DDFF">;</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-1bae00x">MyLib.h:</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">extern</span><span style="color:#C792EA"> int</span><span style="color:#BABED8"> Variable</span><span style="color:#89DDFF">;</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-pgzmrw">main.c:</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic"># include</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">MyLib.h</span><span style="color:#89DDFF">"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">int</span><span style="color:#82AAFF"> main</span><span style="color:#89DDFF"> (</span><span style="color:#C792EA"> void</span><span style="color:#89DDFF"> )</span></span>
<span class="line"><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#F07178">    Variable </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#82AAFF">    printf</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> "</span><span style="color:#F07178">%d</span><span style="color:#BABED8">
</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#F07178"> Variable </span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> ;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    return</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-wvwdek">在。h 文件中使用 <code>extern</code> 来引用。c 库文件中定义的变量后，用户即可通过 include 头文件来使用库中的变量。</p> <h2 data-svelte-h="svelte-1dv68q0">static</h2> <p data-svelte-h="svelte-2tqxw9">回到之前提到的例子，如果 <code>foo2.c</code> 中的 <code>extern</code> 去掉又会怎样呢。
对于未初始化的变量，GCC 会默认将它们视为同一个变量，效果与 <code>extern</code> GCC 会报错：</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span>/tmp/ccFN6SQZ.o: ( .data+0x0 ) : multiple definition of \`var'</span></span>
<span class="line"><span>/tmp/ccbc0T4O.o: ( .data+0x0 ) : first defined here</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-1sj5yys">假设 <code>foo1.c</code> 与 <code>foo2.c</code> 分别来自于两个不同的库，如果用户想要同时 include 这两种库时，就会产生 multiple definition 的错误。作为库的开发者，有责任防止这种多重定义的情况的发生，因此需要用到 <code>static。</code></p> <p data-svelte-h="svelte-1u2acfa"><code>static</code> 保证了定义的变量和函数只存在该文件范围内，其他的文件无法 link 这些变量和函数，从而避免了多重定义的问题。</p> <p data-svelte-h="svelte-1wte2m5">除此之外，定义在函数中 <code>static</code> 变量在函数被调用后可维持该变量的值。</p> <p data-svelte-h="svelte-uk8qbh">来看一下下面的例子：</p> <!-- HTML_TAG_START -->${`<pre class="shiki material-theme-palenight" style="background-color:#292D3E;color:#babed8" tabindex="0"><code><span class="line"><span style="color:#C792EA">void</span><span style="color:#82AAFF"> foo</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> )</span></span>
<span class="line"><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#C792EA">    int</span><span style="color:#F07178"> a </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#C792EA">    static</span><span style="color:#C792EA"> int</span><span style="color:#F07178"> sa </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178">    a </span><span style="color:#89DDFF">+=</span><span style="color:#F78C6C"> 5</span><span style="color:#89DDFF">;</span></span>
<span class="line"><span style="color:#F07178">    sa </span><span style="color:#89DDFF">+=</span><span style="color:#F78C6C"> 5</span><span style="color:#89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF">    printf</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> "</span><span style="color:#C3E88D">a = </span><span style="color:#F07178">%d</span><span style="color:#C3E88D">, sa = </span><span style="color:#F07178">%d</span><span style="color:#BABED8">
</span><span style="color:#89DDFF">"</span><span style="color:#89DDFF">,</span><span style="color:#F07178"> a</span><span style="color:#89DDFF">,</span><span style="color:#F07178"> sa </span><span style="color:#89DDFF">)</span><span style="color:#89DDFF"> ;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA">int</span><span style="color:#82AAFF"> main</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> )</span></span>
<span class="line"><span style="color:#89DDFF">{</span></span>
<span class="line"><span style="color:#C792EA">    int</span><span style="color:#F07178"> i</span><span style="color:#89DDFF">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic">    for</span><span style="color:#89DDFF"> (</span><span style="color:#F07178"> i </span><span style="color:#89DDFF">=</span><span style="color:#F78C6C"> 0</span><span style="color:#89DDFF">;</span><span style="color:#F07178"> i </span><span style="color:#89DDFF">&#x3C;</span><span style="color:#F78C6C"> 10</span><span style="color:#89DDFF">;</span><span style="color:#89DDFF"> ++</span><span style="color:#F07178">i </span><span style="color:#89DDFF">)</span></span>
<span class="line"><span style="color:#82AAFF">        foo</span><span style="color:#89DDFF"> (</span><span style="color:#89DDFF"> )</span><span style="color:#89DDFF"> ;</span></span>
<span class="line"><span style="color:#89DDFF">}</span></span></code></pre>`}<!-- HTML_TAG_END --> <p data-svelte-h="svelte-d36lml">这种情况下，main 函数调用 <code>foo</code> 函数，在 <code>foo</code> 执行完退出后，<code>sa</code> 变量仍然保持其退出前的值。当 <code>foo</code> 被在此调用的时候，<code>sa</code> 会在原来的基础上再加 <code>5</code>。</p> <p data-svelte-h="svelte-mmud52">当我们需用保留调用函数的某种状态而又不想创建全局变量时，这种方法就显得比较有用。然而，这种方法的滥用会导致程序的可读性和线程安全，所以需要谨慎使用。</p> <p data-svelte-h="svelte-x12kz1">在 C++中，<code>static</code> 还可用于 class 属性，在此不再赘述。</p> <h2 data-svelte-h="svelte-1seyrq7">参考：</h2> <ol data-svelte-h="svelte-x4y05p"><li><a href="http://stackoverflow.com/questions/572547/what-does-static-mean-in-a-c-program/572550#572550" rel="nofollow">stackoverflow</a></li> <li><a href="https://www.quora.com/What-is-the-deep-difference-between-static-extern-declaration-in-C-C++-programming" rel="nofollow">quora</a></li></ol>`;
});
export {
  Static_vs_extern_in_C as default,
  metadata
};
